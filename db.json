{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/2016-12-25-日志.md","hash":"086314b62961855f74bea9c3a29670d1948509f5","modified":1485182155817},{"_id":"source/_posts/2016-12-26-日志.md","hash":"f906791db9c9a9110c989bbae84616cf43bdb2e4","modified":1485182155817},{"_id":"source/_posts/2016-12-27-日志.md","hash":"6395066de0c8904d68e535c49223e1b91337f529","modified":1485182155818},{"_id":"source/_posts/2017-01-01-日志.md","hash":"1bd1694fa842e875c0141cb8bba2f58982327cd3","modified":1485182155818},{"_id":"source/_posts/TOMCAT假死分析.md","hash":"2cbaf8cbf90eb68c1cc338a590cc911704d90186","modified":1485182155818},{"_id":"source/_posts/博客环境搭建.md","hash":"ba8344197f470b7b5756574495e2543df859ba26","modified":1485182155818},{"_id":"public/2017/01/05/TOMCAT假死分析/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794556},{"_id":"public/2016/12/31/2017-01-01-日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794556},{"_id":"public/2016/12/27/2016-12-27-日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/2016/12/26/博客环境搭建/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/2016/12/26/2016-12-26-日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/2016/12/25/2016-12-25-日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/archives/2016/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/archives/2017/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/categories/日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/categories/CODE/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794557},{"_id":"public/categories/通用技术/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/日志/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/tomcat/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/dbcp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/ubuntu/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558},{"_id":"public/tags/shadowsocks/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485183794558}],"Category":[{"name":"日志","_id":"ciya831yg0002i7pva9ozpj5a"},{"name":"CODE","_id":"ciya831z9000hi7pvys5phvca"},{"name":"通用技术","_id":"ciya831za000li7pvwrnfu21x"}],"Data":[],"Page":[],"Post":[{"title":"2016-12-25 日志","date":"2016-12-25T14:27:16.000Z","_content":"\n折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。\n唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。\n虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。\n是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？\n说了一堆无聊的废话，sign。\n今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。\n写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。\n用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。\n但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？\n另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。\n对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。\n以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。\n曾经的我可是文艺青年。\n就写到这里吧。\n毕竟只是我的测试文章。\n看看编译以后怎么样。\n\n","source":"_posts/2016-12-25-日志.md","raw":"---\ntitle: 2016-12-25 日志\ndate: 2016-12-25 22:27:16\ntags:\ncategory:\n- 日志\n---\n\n折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。\n唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。\n虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。\n是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？\n说了一堆无聊的废话，sign。\n今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。\n写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。\n用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。\n但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？\n另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。\n对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。\n以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。\n曾经的我可是文艺青年。\n就写到这里吧。\n毕竟只是我的测试文章。\n看看编译以后怎么样。\n\n","slug":"2016-12-25-日志","published":1,"updated":"2017-01-23T14:35:55.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831y80000i7pv63wegziu","content":"<p>折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。<br>唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。<br>虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。<br>是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？<br>说了一堆无聊的废话，sign。<br>今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。<br>写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。<br>用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。<br>但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？<br>另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。<br>对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。<br>以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。<br>曾经的我可是文艺青年。<br>就写到这里吧。<br>毕竟只是我的测试文章。<br>看看编译以后怎么样。</p>\n","excerpt":"","more":"<p>折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。<br>唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。<br>虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。<br>是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？<br>说了一堆无聊的废话，sign。<br>今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。<br>写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。<br>用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。<br>但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？<br>另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。<br>对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。<br>以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。<br>曾经的我可是文艺青年。<br>就写到这里吧。<br>毕竟只是我的测试文章。<br>看看编译以后怎么样。</p>\n"},{"title":"2016-12-26 日志","date":"2016-12-26T10:45:52.000Z","_content":"今天的状态很不好。暖气吹得我头疼。\n项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。\n\n不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。\n根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。\n大胆猜测一下，有这样几种可能：\n+ 电信本身挂了。可能性不大。\n+ 电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。\n+ 第三方公司挂了。\n\n然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。\n转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。\n那么什么情况下会出现这种请求无法到达的情况呢？\n假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。\n\n想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。\n\n剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。\n这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。\n真是一个恶性循环。\n其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。\n前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。\n举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。\n“哎，你看起来有点眼熟啊，是东中的吗？”\n这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。\n看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。\n寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。\n说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。\n不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。\n后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。\n这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。\n一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。\n然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。\n这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。\n然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。\n\n这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。\n\n既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。\n感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。\n那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。\n那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。\n\n然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。\n","source":"_posts/2016-12-26-日志.md","raw":"---\ntitle: 2016-12-26 日志\ndate: 2016-12-26 18:45:52\ntags:\n- 日志\ncategory:\n- 日志\n---\n今天的状态很不好。暖气吹得我头疼。\n项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。\n\n不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。\n根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。\n大胆猜测一下，有这样几种可能：\n+ 电信本身挂了。可能性不大。\n+ 电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。\n+ 第三方公司挂了。\n\n然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。\n转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。\n那么什么情况下会出现这种请求无法到达的情况呢？\n假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。\n\n想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。\n\n剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。\n这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。\n真是一个恶性循环。\n其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。\n前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。\n举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。\n“哎，你看起来有点眼熟啊，是东中的吗？”\n这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。\n看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。\n寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。\n说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。\n不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。\n后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。\n这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。\n一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。\n然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。\n这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。\n然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。\n\n这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。\n\n既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。\n感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。\n那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。\n那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。\n\n然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。\n","slug":"2016-12-26-日志","published":1,"updated":"2017-01-23T14:35:55.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831yc0001i7pvcvgwvfnr","content":"<p>今天的状态很不好。暖气吹得我头疼。<br>项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。</p>\n<p>不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。<br>根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。<br>大胆猜测一下，有这样几种可能：</p>\n<ul>\n<li>电信本身挂了。可能性不大。</li>\n<li>电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。</li>\n<li>第三方公司挂了。</li>\n</ul>\n<p>然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。<br>转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。<br>那么什么情况下会出现这种请求无法到达的情况呢？<br>假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。</p>\n<p>想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。</p>\n<p>剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。<br>这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。<br>真是一个恶性循环。<br>其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。<br>前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。<br>举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。<br>“哎，你看起来有点眼熟啊，是东中的吗？”<br>这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。<br>看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。<br>寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。<br>说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。<br>不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。<br>后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。<br>这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。<br>一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。<br>然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。<br>这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。<br>然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。</p>\n<p>这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。</p>\n<p>既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。<br>感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。<br>那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。<br>那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。</p>\n<p>然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。</p>\n","excerpt":"","more":"<p>今天的状态很不好。暖气吹得我头疼。<br>项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。</p>\n<p>不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。<br>根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。<br>大胆猜测一下，有这样几种可能：</p>\n<ul>\n<li>电信本身挂了。可能性不大。</li>\n<li>电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。</li>\n<li>第三方公司挂了。</li>\n</ul>\n<p>然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。<br>转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。<br>那么什么情况下会出现这种请求无法到达的情况呢？<br>假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。</p>\n<p>想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。</p>\n<p>剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。<br>这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。<br>真是一个恶性循环。<br>其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。<br>前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。<br>举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。<br>“哎，你看起来有点眼熟啊，是东中的吗？”<br>这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。<br>看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。<br>寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。<br>说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。<br>不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。<br>后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。<br>这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。<br>一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。<br>然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。<br>这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。<br>然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。</p>\n<p>这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。</p>\n<p>既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。<br>感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。<br>那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。<br>那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。</p>\n<p>然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。</p>\n"},{"title":"2016-12-27 日志","date":"2016-12-27T11:59:07.000Z","_content":"感觉自己真是脆弱。\n何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？\n果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。\n\n电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。\n\n感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。\n比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。\n\n而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。\n内啡肽不够，整个人又开始变得很悲观。\n书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。\n对未来不报希望，不知道将来的生活有何值得期待之处。\n真是令人伤感。\n\n杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。\n明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。\n感觉我的问题就是缺乏自信。\n当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。\n从现在开始，改变自己。\n\n说的倒是容易，改变自己。\n世间最为困难的莫过于此。\n我想起异域的那句名言：\n> what can change the nature of a man?\n\n衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。\n最终，她所期待的只是解脱而已。\n\n愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。\n或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。\n\n我期待着那一天。\n","source":"_posts/2016-12-27-日志.md","raw":"---\ntitle: 2016-12-27 日志\ndate: 2016-12-27 19:59:07\ntags:\n- 日志\ncategory:\n- 日志\n---\n感觉自己真是脆弱。\n何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？\n果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。\n\n电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。\n\n感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。\n比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。\n\n而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。\n内啡肽不够，整个人又开始变得很悲观。\n书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。\n对未来不报希望，不知道将来的生活有何值得期待之处。\n真是令人伤感。\n\n杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。\n明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。\n感觉我的问题就是缺乏自信。\n当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。\n从现在开始，改变自己。\n\n说的倒是容易，改变自己。\n世间最为困难的莫过于此。\n我想起异域的那句名言：\n> what can change the nature of a man?\n\n衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。\n最终，她所期待的只是解脱而已。\n\n愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。\n或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。\n\n我期待着那一天。\n","slug":"2016-12-27-日志","published":1,"updated":"2017-01-23T14:35:55.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831yl0003i7pvhubl93ka","content":"<p>感觉自己真是脆弱。<br>何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？<br>果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。</p>\n<p>电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。</p>\n<p>感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。<br>比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。</p>\n<p>而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。<br>内啡肽不够，整个人又开始变得很悲观。<br>书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。<br>对未来不报希望，不知道将来的生活有何值得期待之处。<br>真是令人伤感。</p>\n<p>杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。<br>明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。<br>感觉我的问题就是缺乏自信。<br>当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。<br>从现在开始，改变自己。</p>\n<p>说的倒是容易，改变自己。<br>世间最为困难的莫过于此。<br>我想起异域的那句名言：</p>\n<blockquote>\n<p>what can change the nature of a man?</p>\n</blockquote>\n<p>衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。<br>最终，她所期待的只是解脱而已。</p>\n<p>愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。<br>或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。</p>\n<p>我期待着那一天。</p>\n","excerpt":"","more":"<p>感觉自己真是脆弱。<br>何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？<br>果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。</p>\n<p>电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。</p>\n<p>感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。<br>比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。</p>\n<p>而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。<br>内啡肽不够，整个人又开始变得很悲观。<br>书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。<br>对未来不报希望，不知道将来的生活有何值得期待之处。<br>真是令人伤感。</p>\n<p>杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。<br>明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。<br>感觉我的问题就是缺乏自信。<br>当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。<br>从现在开始，改变自己。</p>\n<p>说的倒是容易，改变自己。<br>世间最为困难的莫过于此。<br>我想起异域的那句名言：</p>\n<blockquote>\n<p>what can change the nature of a man?</p>\n</blockquote>\n<p>衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。<br>最终，她所期待的只是解脱而已。</p>\n<p>愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。<br>或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。</p>\n<p>我期待着那一天。</p>\n"},{"title":"2017-01-01 日志","date":"2017-01-01T02:29:16.000Z","_content":"新的一年开始了。\n\n也好几天没写日志了。\n\n几天前纠结的事情已经解决了，心境又开始变得轻松起来。\n","source":"_posts/2017-01-01-日志.md","raw":"---\ntitle: 2017-01-01 日志\ndate: 2017-01-01 10:29:16\ntags:\n- 日志\ncategory:\n- 日志\n---\n新的一年开始了。\n\n也好几天没写日志了。\n\n几天前纠结的事情已经解决了，心境又开始变得轻松起来。\n","slug":"2017-01-01-日志","published":1,"updated":"2017-01-23T14:35:55.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831yn0005i7pvf0usw0vv","content":"<p>新的一年开始了。</p>\n<p>也好几天没写日志了。</p>\n<p>几天前纠结的事情已经解决了，心境又开始变得轻松起来。</p>\n","excerpt":"","more":"<p>新的一年开始了。</p>\n<p>也好几天没写日志了。</p>\n<p>几天前纠结的事情已经解决了，心境又开始变得轻松起来。</p>\n"},{"title":"TOMCAT假死分析","date":"2017-01-05T12:29:14.000Z","_content":"#### 现象\n+ tomcat假死，无法响应任何请求。\n+ CPU、内存等均无告警，假死之后CPU占用率变得很低。\n+ 无任何异常日志，CLOSE_WATI数正常。\n+ 静态资源也无法访问\n+ 通过命令查看线程数\n\n```\nps -ef|grep tomcat --获取进程ID\nps -T -p <pid>|wc -l -- 获取tomcat下线程数\n```\n\n发现有近1500个线程，这已经到达tomcat线程上限。\n\n#### 获取DUMP日志\n因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.\n\n```\nkill -3 <pid>\n```\n\n这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。\n因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。\n\n```\necho \"\">catalina.out -- 这个命令也可以用于运行时释放日志\n```\n\n拿到DUMP后，问题开始明朗起来：\n\n```\n\"http-bio-443-exec-1151\" daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n            at java.lang.Object.wait(Object.java:503)\n                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)\n                    - locked <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)\n                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)\n                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)\n                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)\n                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)\n                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)\n                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)\n                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)\n                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)\n\n\n```\n\n有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。\n反查数据库中的连接数:\n\n```\nSELECT COUNT(1) FROM GV$SESSION WHERE machine = '主机名'\n```\n\n结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。\n说明数据库连接池泄露了。\n\n#### 分析\n应用框架采用的是spring+mybatis+dbcp1.4。\n由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。\ngoogle之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。\n但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？\n难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？\n如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。\n但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。\n所以最好的解决方式是找到连接泄漏的位置。\n通过采用DBCP配置：\n\n```\nmaxWait=5000\nremoveAbandoned=true\nremoveAbandonedTimeout=60\nlogAbandoned=true\n```\n\n来定位问题代码的位置。\n设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。\n\n#### 继续跟踪\n目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。\n\n\n\n\n","source":"_posts/TOMCAT假死分析.md","raw":"---\ntitle: TOMCAT假死分析\ndate: 2017-01-05 20:29:14\ntags:\n- tomcat\n- dbcp\ncategory:\n- CODE\n---\n#### 现象\n+ tomcat假死，无法响应任何请求。\n+ CPU、内存等均无告警，假死之后CPU占用率变得很低。\n+ 无任何异常日志，CLOSE_WATI数正常。\n+ 静态资源也无法访问\n+ 通过命令查看线程数\n\n```\nps -ef|grep tomcat --获取进程ID\nps -T -p <pid>|wc -l -- 获取tomcat下线程数\n```\n\n发现有近1500个线程，这已经到达tomcat线程上限。\n\n#### 获取DUMP日志\n因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.\n\n```\nkill -3 <pid>\n```\n\n这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。\n因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。\n\n```\necho \"\">catalina.out -- 这个命令也可以用于运行时释放日志\n```\n\n拿到DUMP后，问题开始明朗起来：\n\n```\n\"http-bio-443-exec-1151\" daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n            at java.lang.Object.wait(Object.java:503)\n                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)\n                    - locked <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)\n                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)\n                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)\n                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)\n                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)\n                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)\n                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)\n                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)\n                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)\n\n\n```\n\n有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。\n反查数据库中的连接数:\n\n```\nSELECT COUNT(1) FROM GV$SESSION WHERE machine = '主机名'\n```\n\n结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。\n说明数据库连接池泄露了。\n\n#### 分析\n应用框架采用的是spring+mybatis+dbcp1.4。\n由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。\ngoogle之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。\n但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？\n难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？\n如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。\n但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。\n所以最好的解决方式是找到连接泄漏的位置。\n通过采用DBCP配置：\n\n```\nmaxWait=5000\nremoveAbandoned=true\nremoveAbandonedTimeout=60\nlogAbandoned=true\n```\n\n来定位问题代码的位置。\n设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。\n\n#### 继续跟踪\n目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。\n\n\n\n\n","slug":"TOMCAT假死分析","published":1,"updated":"2017-01-23T14:35:55.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831yv0006i7pvx2yxx5bh","content":"<h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><ul>\n<li>tomcat假死，无法响应任何请求。</li>\n<li>CPU、内存等均无告警，假死之后CPU占用率变得很低。</li>\n<li>无任何异常日志，CLOSE_WATI数正常。</li>\n<li>静态资源也无法访问</li>\n<li>通过命令查看线程数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef|grep tomcat --获取进程ID</div><div class=\"line\">ps -T -p &lt;pid&gt;|wc -l -- 获取tomcat下线程数</div></pre></td></tr></table></figure>\n<p>发现有近1500个线程，这已经到达tomcat线程上限。</p>\n<h4 id=\"获取DUMP日志\"><a href=\"#获取DUMP日志\" class=\"headerlink\" title=\"获取DUMP日志\"></a>获取DUMP日志</h4><p>因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -3 &lt;pid&gt;</div></pre></td></tr></table></figure>\n<p>这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。<br>因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&quot;&gt;catalina.out -- 这个命令也可以用于运行时释放日志</div></pre></td></tr></table></figure>\n<p>拿到DUMP后，问题开始明朗起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;http-bio-443-exec-1151&quot; daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]</div><div class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</div><div class=\"line\">    at java.lang.Object.wait(Native Method)</div><div class=\"line\">        - waiting on &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">            at java.lang.Object.wait(Object.java:503)</div><div class=\"line\">                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)</div><div class=\"line\">                    - locked &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)</div><div class=\"line\">                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</div><div class=\"line\">                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)</div><div class=\"line\">                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)</div><div class=\"line\">                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</div><div class=\"line\">                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)</div><div class=\"line\">                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)</div><div class=\"line\">                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)</div><div class=\"line\">                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class=\"line\">                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)</div></pre></td></tr></table></figure>\n<p>有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。<br>反查数据库中的连接数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(1) FROM GV$SESSION WHERE machine = &apos;主机名&apos;</div></pre></td></tr></table></figure>\n<p>结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。<br>说明数据库连接池泄露了。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>应用框架采用的是spring+mybatis+dbcp1.4。<br>由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。<br>google之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。<br>但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？<br>难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？<br>如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。<br>但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。<br>所以最好的解决方式是找到连接泄漏的位置。<br>通过采用DBCP配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxWait=5000</div><div class=\"line\">removeAbandoned=true</div><div class=\"line\">removeAbandonedTimeout=60</div><div class=\"line\">logAbandoned=true</div></pre></td></tr></table></figure>\n<p>来定位问题代码的位置。<br>设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。</p>\n<h4 id=\"继续跟踪\"><a href=\"#继续跟踪\" class=\"headerlink\" title=\"继续跟踪\"></a>继续跟踪</h4><p>目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。</p>\n","excerpt":"","more":"<h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><ul>\n<li>tomcat假死，无法响应任何请求。</li>\n<li>CPU、内存等均无告警，假死之后CPU占用率变得很低。</li>\n<li>无任何异常日志，CLOSE_WATI数正常。</li>\n<li>静态资源也无法访问</li>\n<li>通过命令查看线程数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef|grep tomcat --获取进程ID</div><div class=\"line\">ps -T -p &lt;pid&gt;|wc -l -- 获取tomcat下线程数</div></pre></td></tr></table></figure>\n<p>发现有近1500个线程，这已经到达tomcat线程上限。</p>\n<h4 id=\"获取DUMP日志\"><a href=\"#获取DUMP日志\" class=\"headerlink\" title=\"获取DUMP日志\"></a>获取DUMP日志</h4><p>因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -3 &lt;pid&gt;</div></pre></td></tr></table></figure>\n<p>这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。<br>因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&quot;&gt;catalina.out -- 这个命令也可以用于运行时释放日志</div></pre></td></tr></table></figure>\n<p>拿到DUMP后，问题开始明朗起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;http-bio-443-exec-1151&quot; daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]</div><div class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</div><div class=\"line\">    at java.lang.Object.wait(Native Method)</div><div class=\"line\">        - waiting on &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">            at java.lang.Object.wait(Object.java:503)</div><div class=\"line\">                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)</div><div class=\"line\">                    - locked &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)</div><div class=\"line\">                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</div><div class=\"line\">                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)</div><div class=\"line\">                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)</div><div class=\"line\">                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</div><div class=\"line\">                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)</div><div class=\"line\">                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)</div><div class=\"line\">                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)</div><div class=\"line\">                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class=\"line\">                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)</div></pre></td></tr></table></figure>\n<p>有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。<br>反查数据库中的连接数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(1) FROM GV$SESSION WHERE machine = &apos;主机名&apos;</div></pre></td></tr></table></figure>\n<p>结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。<br>说明数据库连接池泄露了。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>应用框架采用的是spring+mybatis+dbcp1.4。<br>由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。<br>google之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。<br>但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？<br>难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？<br>如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。<br>但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。<br>所以最好的解决方式是找到连接泄漏的位置。<br>通过采用DBCP配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxWait=5000</div><div class=\"line\">removeAbandoned=true</div><div class=\"line\">removeAbandonedTimeout=60</div><div class=\"line\">logAbandoned=true</div></pre></td></tr></table></figure>\n<p>来定位问题代码的位置。<br>设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。</p>\n<h4 id=\"继续跟踪\"><a href=\"#继续跟踪\" class=\"headerlink\" title=\"继续跟踪\"></a>继续跟踪</h4><p>目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。</p>\n"},{"title":"hexo+ubuntu+github博客环境搭建","date":"2016-12-26T15:28:05.000Z","_content":"总算把环境给搭好了。\n架构为：hexo+github，系统为ubuntu。\n\n### 源代码管理\n首先在github创建一个仓库，建立两个分支：master，gh-pages。\nmaster用来存放源代码，gh-pages用来存放编译后的html静态页面文件。\n前者手动管理，后者配置在conf中由hexo进行管理。\n+ 创建文件夹\n```\nmkdir repository\ncd repository\n```\n\n+ 建立git环境\n```\ngit clone https://github.com/LiangKim/myblog.git\n```\n这样在repository文件夹下就自动多了myblog文件夹。\n此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.\n\n### hexo\n+ 建立hexo环境\n进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。\n要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。\n```\nsudo npm install hexo -g\nnpm install hexo-deployer-git --save\n```\n第一行命令安装hexo环境，第二行命令安装了git插件。\n进入myblog目录:\n```\nhexo init\n```\n这一步代码执行了\n","source":"_posts/博客环境搭建.md","raw":"---\ntitle: hexo+ubuntu+github博客环境搭建\ndate: 2016-12-26 23:28:05\ntags:\n- hexo\n- ubuntu\n- shadowsocks\ncategory:\n- 通用技术\n---\n总算把环境给搭好了。\n架构为：hexo+github，系统为ubuntu。\n\n### 源代码管理\n首先在github创建一个仓库，建立两个分支：master，gh-pages。\nmaster用来存放源代码，gh-pages用来存放编译后的html静态页面文件。\n前者手动管理，后者配置在conf中由hexo进行管理。\n+ 创建文件夹\n```\nmkdir repository\ncd repository\n```\n\n+ 建立git环境\n```\ngit clone https://github.com/LiangKim/myblog.git\n```\n这样在repository文件夹下就自动多了myblog文件夹。\n此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.\n\n### hexo\n+ 建立hexo环境\n进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。\n要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。\n```\nsudo npm install hexo -g\nnpm install hexo-deployer-git --save\n```\n第一行命令安装hexo环境，第二行命令安装了git插件。\n进入myblog目录:\n```\nhexo init\n```\n这一步代码执行了\n","slug":"博客环境搭建","published":1,"updated":"2017-01-23T14:35:55.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciya831yx0008i7pvyclfdmzy","content":"<p>总算把环境给搭好了。<br>架构为：hexo+github，系统为ubuntu。</p>\n<h3 id=\"源代码管理\"><a href=\"#源代码管理\" class=\"headerlink\" title=\"源代码管理\"></a>源代码管理</h3><p>首先在github创建一个仓库，建立两个分支：master，gh-pages。<br>master用来存放源代码，gh-pages用来存放编译后的html静态页面文件。<br>前者手动管理，后者配置在conf中由hexo进行管理。</p>\n<ul>\n<li><p>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir repository</div><div class=\"line\">cd repository</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立git环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/LiangKim/myblog.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样在repository文件夹下就自动多了myblog文件夹。<br>此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.</p>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><ul>\n<li>建立hexo环境<br>进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。<br>要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install hexo -g</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一行命令安装hexo环境，第二行命令安装了git插件。<br>进入myblog目录:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>这一步代码执行了</p>\n","excerpt":"","more":"<p>总算把环境给搭好了。<br>架构为：hexo+github，系统为ubuntu。</p>\n<h3 id=\"源代码管理\"><a href=\"#源代码管理\" class=\"headerlink\" title=\"源代码管理\"></a>源代码管理</h3><p>首先在github创建一个仓库，建立两个分支：master，gh-pages。<br>master用来存放源代码，gh-pages用来存放编译后的html静态页面文件。<br>前者手动管理，后者配置在conf中由hexo进行管理。</p>\n<ul>\n<li><p>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir repository</div><div class=\"line\">cd repository</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立git环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/LiangKim/myblog.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样在repository文件夹下就自动多了myblog文件夹。<br>此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.</p>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><ul>\n<li>建立hexo环境<br>进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。<br>要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install hexo -g</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一行命令安装hexo环境，第二行命令安装了git插件。<br>进入myblog目录:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>这一步代码执行了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciya831yn0005i7pvf0usw0vv","category_id":"ciya831yg0002i7pva9ozpj5a","_id":"ciya831z2000ai7pvnuzi1fvd"},{"post_id":"ciya831y80000i7pv63wegziu","category_id":"ciya831yg0002i7pva9ozpj5a","_id":"ciya831z6000di7pvzl24pzhs"},{"post_id":"ciya831yc0001i7pvcvgwvfnr","category_id":"ciya831yg0002i7pva9ozpj5a","_id":"ciya831z8000gi7pviq64bygf"},{"post_id":"ciya831yl0003i7pvhubl93ka","category_id":"ciya831yg0002i7pva9ozpj5a","_id":"ciya831za000ki7pvcxi8raox"},{"post_id":"ciya831yv0006i7pvx2yxx5bh","category_id":"ciya831z9000hi7pvys5phvca","_id":"ciya831zf000ni7pv11ods9z1"},{"post_id":"ciya831yx0008i7pvyclfdmzy","category_id":"ciya831za000li7pvwrnfu21x","_id":"ciya831zi000qi7pvfmic3xxv"}],"PostTag":[{"post_id":"ciya831yc0001i7pvcvgwvfnr","tag_id":"ciya831yn0004i7pvzhjcjlgc","_id":"ciya831z2000bi7pv6i6b18xg"},{"post_id":"ciya831yl0003i7pvhubl93ka","tag_id":"ciya831yn0004i7pvzhjcjlgc","_id":"ciya831z8000fi7pvpryctzbt"},{"post_id":"ciya831yn0005i7pvf0usw0vv","tag_id":"ciya831yn0004i7pvzhjcjlgc","_id":"ciya831za000ji7pvdwu7chi2"},{"post_id":"ciya831yv0006i7pvx2yxx5bh","tag_id":"ciya831za000ii7pv45g5izw7","_id":"ciya831zi000pi7pvwgdlly82"},{"post_id":"ciya831yv0006i7pvx2yxx5bh","tag_id":"ciya831za000mi7pv4vz1ts0z","_id":"ciya831zj000ri7pvelj141aj"},{"post_id":"ciya831yx0008i7pvyclfdmzy","tag_id":"ciya831zi000oi7pvmi1emg2i","_id":"ciya831zp000ui7pvzx4p6g40"},{"post_id":"ciya831yx0008i7pvyclfdmzy","tag_id":"ciya831zj000si7pvkyjdbe42","_id":"ciya831zp000vi7pvvgzt0jji"},{"post_id":"ciya831yx0008i7pvyclfdmzy","tag_id":"ciya831zl000ti7pvvhpk50r8","_id":"ciya831zq000wi7pvs5oxeia9"}],"Tag":[{"name":"日志","_id":"ciya831yn0004i7pvzhjcjlgc"},{"name":"tomcat","_id":"ciya831za000ii7pv45g5izw7"},{"name":"dbcp","_id":"ciya831za000mi7pv4vz1ts0z"},{"name":"hexo","_id":"ciya831zi000oi7pvmi1emg2i"},{"name":"ubuntu","_id":"ciya831zj000si7pvkyjdbe42"},{"name":"shadowsocks","_id":"ciya831zl000ti7pvvhpk50r8"}]}}