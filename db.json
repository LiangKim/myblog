{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2016-12-25-日志.md","hash":"086314b62961855f74bea9c3a29670d1948509f5","modified":1486643351000},{"_id":"source/_posts/2016-12-26-日志.md","hash":"f906791db9c9a9110c989bbae84616cf43bdb2e4","modified":1486643351000},{"_id":"source/_posts/2016-12-27-日志.md","hash":"6395066de0c8904d68e535c49223e1b91337f529","modified":1486643351000},{"_id":"source/_posts/2017-01-01-日志.md","hash":"1bd1694fa842e875c0141cb8bba2f58982327cd3","modified":1486643351000},{"_id":"source/_posts/C程序设计语言：第一章.md","hash":"fa02c29b0c17503f6f87dd992015f2ae6bd424f5","modified":1486643351000},{"_id":"source/_posts/TOMCAT假死分析.md","hash":"85b9e773633706d1c99a1339217d2428e5146af5","modified":1488972689000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1488803288000},{"_id":"source/_posts/lucune初体验.md","hash":"b92ff40fd592f4502be1bc3e84f47ca23bdedfbd","modified":1486643351000},{"_id":"source/_posts/mac开发环境搭建小记.md","hash":"eb4307980a5706957c906a895db466840ab1d664","modified":1486643351000},{"_id":"source/_posts/动态数据源路由容易掉进去的坑.md","hash":"3724cd8c94901c253dc21b63d47b0ae555192154","modified":1486643351000},{"_id":"source/_posts/博客环境搭建.md","hash":"ba8344197f470b7b5756574495e2543df859ba26","modified":1486643351000},{"_id":"source/_posts/如何阅读一本书.md","hash":"0a6c274dcee6b08e3712eb42a2633deceb81c117","modified":1486643351000},{"_id":"source/categories/index.md","hash":"47249b118a8cd9acf493d1eed704a4da3af3c30e","modified":1486643351000},{"_id":"source/tags/index.md","hash":"de7928ddeccdaa87270690567db4839419bf8a52","modified":1486643351000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1488803288000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1488803288000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1488803288000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1488803288000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488803288000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1488803288000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1488803288000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488803288000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1488803288000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1488803288000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1488803288000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1488803288000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1488803288000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488803288000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488803288000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488803288000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488803288000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1488803288000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488803288000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488803288000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1488803288000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1488803288000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1488803288000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1488803288000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1488803288000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1488803288000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1488803288000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488803288000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488803288000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488803288000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1488803288000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1488803288000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1488803288000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1488803288000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488803288000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488803288000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488803288000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488803288000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488803288000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488803288000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488803288000},{"_id":"public/categories/index.html","hash":"6ffa6b526262f3d3dab90ad2a44ab9f6a75f0d0b","modified":1488975537067},{"_id":"public/tags/index.html","hash":"6354cf1e9563a0f65775fb4f840168973dd31d29","modified":1488975537067},{"_id":"public/2017/03/06/hello-world/index.html","hash":"0e78a9a450492566fb7a037f211cb6b738f9a5d0","modified":1488975537067},{"_id":"public/2017/02/05/如何阅读一本书/index.html","hash":"7817bd495ca2d622bb1791943258abcb5b25f8f8","modified":1488975537067},{"_id":"public/2017/02/05/C程序设计语言：第一章/index.html","hash":"99c20d3f40751c6dfe9e706da7de7156fb513632","modified":1488975537067},{"_id":"public/2017/01/27/lucune初体验/index.html","hash":"d0fd983937bf0c7e22eb5a03c7cd2999533cde5d","modified":1488975537067},{"_id":"public/2017/01/27/mac开发环境搭建小记/index.html","hash":"be4987ad5dbfeb44589833d5145daff227bb1617","modified":1488975537067},{"_id":"public/2017/01/01/2017-01-01-日志/index.html","hash":"a1b40e4245cdfb509b296d910d7ebfa4a22f7a9a","modified":1488975537067},{"_id":"public/2016/12/27/2016-12-27-日志/index.html","hash":"25697400f19d1cc066f600c2852a925108af2438","modified":1488975537068},{"_id":"public/2016/12/26/博客环境搭建/index.html","hash":"b8edf163a148b4a0a673c625f1227ac56681c422","modified":1488975537068},{"_id":"public/2016/12/25/2016-12-25-日志/index.html","hash":"437d4d19fe9ff9d88d07c295b803b0e5294e8698","modified":1488975537068},{"_id":"public/archives/index.html","hash":"bf451b680eb6514784e7dd3108b6674f460fa95f","modified":1488975537068},{"_id":"public/archives/page/2/index.html","hash":"96dbc89c00a557ce7a96788a0685f47b944b060a","modified":1488975537068},{"_id":"public/archives/2016/12/index.html","hash":"3706a61c5b8e2d0c3c46a1218630e5ddaad92029","modified":1488975537068},{"_id":"public/archives/2016/index.html","hash":"dd3695d8d11442608bba67011b72f4940a021761","modified":1488975537068},{"_id":"public/archives/2017/index.html","hash":"99e9dd4152cdb83722ae1b1649355958ae488e75","modified":1488975537068},{"_id":"public/archives/2017/01/index.html","hash":"8a0d0071314d3c4176c1e1d9f06bac1ab103b5c3","modified":1488975537068},{"_id":"public/archives/2017/02/index.html","hash":"0e1edbe5b220c92d0c3fe3fa6588fd65b95be8a6","modified":1488975537068},{"_id":"public/categories/日志/index.html","hash":"d364d83201bcaa8915d1fdac555b8a25c2e0ec94","modified":1488975537068},{"_id":"public/archives/2017/03/index.html","hash":"376d55b0575de9798cc88245e3e7cc13bf87b8a3","modified":1488975537068},{"_id":"public/categories/C程序语言设计/index.html","hash":"229957022d531bd9ebcb950a0036efd23fc5e2e8","modified":1488975537068},{"_id":"public/categories/CODE/index.html","hash":"7fb7db750d408ea13d339ff7a6466d2a3240f71e","modified":1488975537068},{"_id":"public/categories/lucune/index.html","hash":"e5b9250c4b4d32aebae828ce6d59f9ca95682c49","modified":1488975537068},{"_id":"public/categories/zjipst/index.html","hash":"84f1f231d10ebd980639e1837671edf9e309970e","modified":1488975537068},{"_id":"public/categories/通用技术/index.html","hash":"838cd6251c7b27aa71aab32d4e77f77f559c72fb","modified":1488975537068},{"_id":"public/categories/读书笔记/index.html","hash":"076fabf0e9fba895f88060534db9a94c371a90cf","modified":1488975537068},{"_id":"public/tags/日志/index.html","hash":"fe56439f909bed6f4eea886224919417fd40e026","modified":1488975537068},{"_id":"public/tags/C/index.html","hash":"8446d5554372960f4ff35d69e8635f2a678b5bb4","modified":1488975537068},{"_id":"public/tags/阅读笔记/index.html","hash":"56b5adb777febf5028ece5a6c691f2cf4f84b2be","modified":1488975537069},{"_id":"public/tags/tomcat/index.html","hash":"12870015001973163f9ee4cb48eeeff03f8bdb90","modified":1488975537070},{"_id":"public/tags/dbcp/index.html","hash":"0c21050e0a8e7b5452f6d6ef2086d9bab406cff8","modified":1488975537071},{"_id":"public/tags/全文检索/index.html","hash":"a20d00fc5a93f11cf53e4fce88cb2a45e05e92a2","modified":1488975537071},{"_id":"public/tags/mac/index.html","hash":"daf15c21e0229c42c55d9e1124123fd6910a231a","modified":1488975537071},{"_id":"public/tags/BUG/index.html","hash":"411dec52821d6cb05f1f7d7ae009fe5e13274387","modified":1488975537071},{"_id":"public/tags/Spring/index.html","hash":"d0662e3ae558781f8413308ad1ca4750028c5e3f","modified":1488975537071},{"_id":"public/tags/DynamicDataSourceRouting/index.html","hash":"0f4825a21008414f9d154b20ea36dd91f04b3395","modified":1488975537071},{"_id":"public/tags/hexo/index.html","hash":"4df8aee4fa63e5ad200c6d2dd6cab1f979b7e6e8","modified":1488975537071},{"_id":"public/tags/ubuntu/index.html","hash":"56cff1d5bfca7f43960a98e8820e5d67ad043bbc","modified":1488975537071},{"_id":"public/tags/shadowsocks/index.html","hash":"93a522f7ffcf8aa4fe25f78d6739e3e0783f7e47","modified":1488975537071},{"_id":"public/2017/01/24/动态数据源路由容易掉进去的坑/index.html","hash":"345b553bc46e43fce4a09e9d2d2bdb8161410041","modified":1488975537071},{"_id":"public/2017/01/05/TOMCAT假死分析/index.html","hash":"0244e431140dca3d44a900a2eea6ce6c38ee568f","modified":1488975537071},{"_id":"public/2016/12/26/2016-12-26-日志/index.html","hash":"0a975d6db13a9cf16c284c6a93f81f16b4258c2c","modified":1488975537072},{"_id":"public/index.html","hash":"c11ccb9f87e05557dd6c1b804ce41ef4860d8d1a","modified":1488975537072},{"_id":"public/page/2/index.html","hash":"5924bfdef3974877f32ffc50847786bf222f8e77","modified":1488975537072},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488975537084},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488975537084},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488975537084},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488975537084},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488975537085},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488975537085},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488975537085},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488975537086},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488975537086},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488975537086},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488975537823},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488975537844},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488975537844},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488975537844},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488975537844},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488975537844},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488975537844},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488975537844},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1488975537845},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488975537845},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488975537845},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488975537847},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488975537847}],"Category":[{"name":"日志","_id":"cj00xk6gd000493tag2ms0883"},{"name":"C程序语言设计","_id":"cj00xk6h2000m93takpn6hmu2"},{"name":"CODE","_id":"cj00xk6ha000s93tahmbo5bnh"},{"name":"lucune","_id":"cj00xk6hf000x93ta1dg4mpq5"},{"name":"zjipst","_id":"cj00xk6hh001193ta22vj4rth"},{"name":"通用技术","_id":"cj00xk6hl001593takkhvhw39"},{"name":"读书笔记","_id":"cj00xk6hp001993tainlswmg7"}],"Data":[],"Page":[{"title":"categories","date":"2017-01-23T02:42:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-23 10:42:52\ntype: \"categories\"\n---\n","updated":"2017-02-09T12:29:11.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj00xk6g8000193tadodhgwng","content":"","excerpt":"","more":""},{"title":"Tagcloud","date":"2017-01-23T02:40:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tagcloud\ndate: 2017-01-23 10:40:42\ntype: \"tags\"\n---\n","updated":"2017-02-09T12:29:11.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj00xk6gc000393ta7b4xo9jq","content":"","excerpt":"","more":""}],"Post":[{"title":"2016-12-25 日志","date":"2016-12-25T14:27:16.000Z","_content":"\n折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。\n唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。\n虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。\n是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？\n说了一堆无聊的废话，sign。\n今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。\n写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。\n用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。\n但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？\n另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。\n对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。\n以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。\n曾经的我可是文艺青年。\n就写到这里吧。\n毕竟只是我的测试文章。\n看看编译以后怎么样。\n\n","source":"_posts/2016-12-25-日志.md","raw":"---\ntitle: 2016-12-25 日志\ndate: 2016-12-25 22:27:16\ntags:\ncategory:\n- 日志\n---\n\n折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。\n唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。\n虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。\n是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？\n说了一堆无聊的废话，sign。\n今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。\n写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。\n用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。\n但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？\n另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。\n对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。\n以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。\n曾经的我可是文艺青年。\n就写到这里吧。\n毕竟只是我的测试文章。\n看看编译以后怎么样。\n\n","slug":"2016-12-25-日志","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6g3000093tam5twov8n","content":"<p>折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。<br>唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。<br>虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。<br>是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？<br>说了一堆无聊的废话，sign。<br>今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。<br>写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。<br>用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。<br>但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？<br>另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。<br>对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。<br>以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。<br>曾经的我可是文艺青年。<br>就写到这里吧。<br>毕竟只是我的测试文章。<br>看看编译以后怎么样。</p>\n","excerpt":"","more":"<p>折腾了一天hexo+github,总算把大致的开发框架弄好了，以后大概能按照这个模式写博客了。<br>唯一有点麻烦的就是需要在vm+ubuntu的环境下进行md文件的编写和编译，有点麻烦，考虑以后用ssh+脚本自动化编译的模式，这样就能在windows环境下直接写博客了。<br>虽说在Ubuntu下写也不是不行，但是总觉得VM很卡。<br>是不是计算机内存不够呢？毕竟只有8G，但是看了Windows的资源管理器，发现CPU和内存使用情况都很健康，那为什么切换到VM下的Ubuntu就会这么卡呢？<br>说了一堆无聊的废话，sign。<br>今天除了吃早餐都没出门，中午和晚餐分别吃的羊排和小龙虾，感觉特不好，又贵又难吃；而且还很腻。<br>写到这里发现用的都是纯文本，MD的格式化字符都忘得一干二净，写完这篇文章后一定要回头看看语法。<br>用了两天的华为P9，感觉还可以，但是没有我想象中那么惊艳。系统偶尔有点卡，当然这也可能是我的幻觉而已。最让我满意的是指纹解锁，不用每次都去输入解锁密码，很是方便。<br>但缺点也很多，比如换个字体还要钱，真是想钱想疯了，菊花为就这么缺钱？<br>另外本来想这两天去科技图书馆逛逛的，结果下雨了，未能成行。而且天气也开始变得很冷，明明是10℃，却冷的和零下一样，真是奇怪。<br>对了，md文件怎么插入图片呢？单一的文本还是有点难看啊。<br>以后要在这里多写点技术文章，充实一下自己。另外还要开始写读书笔记了，看了那么多书，如果不写点东西记录一下，简直和没看一样。<br>曾经的我可是文艺青年。<br>就写到这里吧。<br>毕竟只是我的测试文章。<br>看看编译以后怎么样。</p>\n"},{"title":"2016-12-26 日志","date":"2016-12-26T10:45:52.000Z","_content":"今天的状态很不好。暖气吹得我头疼。\n项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。\n\n不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。\n根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。\n大胆猜测一下，有这样几种可能：\n+ 电信本身挂了。可能性不大。\n+ 电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。\n+ 第三方公司挂了。\n\n然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。\n转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。\n那么什么情况下会出现这种请求无法到达的情况呢？\n假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。\n\n想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。\n\n剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。\n这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。\n真是一个恶性循环。\n其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。\n前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。\n举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。\n“哎，你看起来有点眼熟啊，是东中的吗？”\n这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。\n看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。\n寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。\n说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。\n不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。\n后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。\n这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。\n一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。\n然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。\n这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。\n然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。\n\n这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。\n\n既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。\n感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。\n那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。\n那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。\n\n然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。\n","source":"_posts/2016-12-26-日志.md","raw":"---\ntitle: 2016-12-26 日志\ndate: 2016-12-26 18:45:52\ntags:\n- 日志\ncategory:\n- 日志\n---\n今天的状态很不好。暖气吹得我头疼。\n项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。\n\n不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。\n根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。\n大胆猜测一下，有这样几种可能：\n+ 电信本身挂了。可能性不大。\n+ 电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。\n+ 第三方公司挂了。\n\n然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。\n转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。\n那么什么情况下会出现这种请求无法到达的情况呢？\n假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。\n\n想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。\n\n剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。\n这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。\n真是一个恶性循环。\n其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。\n前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。\n举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。\n“哎，你看起来有点眼熟啊，是东中的吗？”\n这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。\n看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。\n寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。\n说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。\n不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。\n后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。\n这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。\n一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。\n然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。\n这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。\n然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。\n\n这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。\n\n既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。\n感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。\n那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。\n那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。\n\n然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。\n","slug":"2016-12-26-日志","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6g9000293ta50aeboi5","content":"<p>今天的状态很不好。暖气吹得我头疼。<br>项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。</p>\n<p>不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。<br>根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。<br>大胆猜测一下，有这样几种可能：</p>\n<ul>\n<li>电信本身挂了。可能性不大。</li>\n<li>电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。</li>\n<li>第三方公司挂了。</li>\n</ul>\n<p>然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。<br>转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。<br>那么什么情况下会出现这种请求无法到达的情况呢？<br>假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。</p>\n<p>想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。</p>\n<p>剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。<br>这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。<br>真是一个恶性循环。<br>其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。<br>前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。<br>举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。<br>“哎，你看起来有点眼熟啊，是东中的吗？”<br>这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。<br>看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。<br>寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。<br>说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。<br>不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。<br>后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。<br>这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。<br>一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。<br>然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。<br>这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。<br>然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。</p>\n<p>这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。</p>\n<p>既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。<br>感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。<br>那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。<br>那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。</p>\n<p>然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。</p>\n","excerpt":"","more":"<p>今天的状态很不好。暖气吹得我头疼。<br>项目定位服务出了问题，一看日志发现上次写的代码有问题，没有切换到地市。真是无语，当一个人的注意力被另一件事物吸引，很容易忘记之前在做的事情。引以为戒吧。</p>\n<p>不过这次的问题和我的代码实际上没有任何关联，因为我加了防御措施，当账号密码不正确时会自动切换到之前在用的通用账号密码。所以这次出现的状况是第三方的服务商的锅，与公司无关。<br>根据已有的资料来看，问题不在于内外网交互，而在于外网侧到电信运营商之间的这条通路出现了问题。而根据那家公司的实施说，电信在昨天就发现该第三方公司到电信的请求数突然变为0了。<br>大胆猜测一下，有这样几种可能：</p>\n<ul>\n<li>电信本身挂了。可能性不大。</li>\n<li>电信提供给第三方公司的账号密码过期了，或者是域名变更等等。总的来说就是两家公司的服务都没有出现问题，而关键在于沟通的不协调。这种可能性不大。</li>\n<li>第三方公司挂了。</li>\n</ul>\n<p>然而以上三种情况实际上都不太可能发生，因为这个定位服务实际上已经稳定运行了将近三年，应该没人会来改动代码或者配置。<br>转换一下立场，站在第三方公司的角度来看，他也应该是根据内网交互出来的请求数据，向电信公司发出定位请求。而这个请求实际上没有到电信，他那边抛Socket time out异常。<br>那么什么情况下会出现这种请求无法到达的情况呢？<br>假设两者同处于互联网，那么这种情况是难以想象的，除非请求方式并非简单的HTTP请求。</p>\n<p>想半天也想不明白究竟是何种原因会导致如此奇妙的状况，继续跟踪吧，希望明天能修复好。毕竟直接面对用户的是我们。</p>\n<p>剩下的也没什么好说的，就是感觉到心情有些不好，看待事物的方式又开始变得很悲观。<br>这样一样就感觉到自己是一个相当脆弱的人，而又考虑到这点的我变得更加对未来不抱希望了。<br>真是一个恶性循环。<br>其实产生这种情绪的原因不仅仅是自身的原因，或者说直接原因不仅仅是因为我的性格问题。也许还和我的社交关系太过单一有关，另外我的兴趣爱好也实在乏善可陈。<br>前者，大概是因为我对“朋友”这一概念太过执着，对于这一标准太过严格，以至于有生以来也没有多少人能符合我对于这一概念的标准。<br>举个例子来说，上周夜跑，跑到江边的塑胶跑道时，遇见了一个高中同学。这实在是很稀罕的事，那时我没戴眼镜，是他叫住的我。他一边看着我，一边回忆着我的名字。<br>“哎，你看起来有点眼熟啊，是东中的吗？”<br>这几年人的外貌变化还是有点大，虽然第一时间我没认出他来，不过潜意识里已经叫出了他的名字。<br>看来我的记忆力实在不错，然而我们之间并不怎么熟，无非是高一那一年里是室友，但没怎么搭话。<br>寒暄几句之后我开始了跑步。在那之后说是要联系，实际上我也没有丝毫动力。毕竟我怀疑到最后他也没想起我是谁，尽管我报了自己的名字。<br>说到高中，至少在第一年，是最为难受的一年，没有朋友，因为那时候我有点目中无人。<br>不过目中无人也是有理由的，因为那些家伙实在教我鄙视。我就没遇到过一个在品德上稍微无可指摘的家伙。<br>后两年状况倒是好了一些，大概是因为我成绩好，不怎么用功就能排名前列吧。总是有人来向我请教问题，我总是一一解答，没有丝毫不耐。<br>这其实对于一般人来说是不正常的，频繁来问我的大概有6-7人，正常人早就不耐烦，甚至破口大骂的，然而我基本上没什么特殊的情绪。<br>一方面可能是因为在那段时间里，我极度渴望和其他人交流的缘故吧。<br>然而总有人带着有色眼镜来看待我的行为，比如对某某有兴趣啦，喜欢上某某啦。甚至还有一个女生的闺蜜直截了当的当面对我，“你是不是喜欢XX？放弃吧，她对你不会产生兴趣的。”当时我的想法是惊愕，反问她为什么会这么想，而后我也没在意她说了什么，继续去看我的书了。然而后来一想，才发现莫名其妙被人看低了。<br>这样一想，我后来也无非是带着小丑的面具与人交往而已，心想着与人为善就能过得好，然而其实并不会。其他人总是会觉得你这善心有些可疑，继而捏造出一个龌蹉的缘由，然后心安理得地践踏你的善行。仅此而已。<br>然而想到这里，我的潜意识又会为了他们开脱。其中的一条理由便是：人的记忆是不可靠的。人总是看到自己想看到的，记住自己想记住的。所以我揣测的那些证据无非是我悲观情绪下变形了的记忆，实际情况并非是那样。</p>\n<p>这种说法实际上也有些道理，我无法反驳。然而如果有人问我高中那会儿是否有什么要好的朋友，我的脑海只会是一片空白。</p>\n<p>既然如此，再回忆一下大学生活吧。那四年来说，唯一的情感大概就是陌生的惶恐。<br>感觉自己不属于这里，无法融入任何一个集体。无法专心于任何事，唯一幸福的时刻就是在图书馆抱着本书度过一个一个充满阳光的下午。这四年的社交生活甚至比高中还要压抑。高中时至少还有频繁的交流，那时候的社交大概具有某种强制性，然而一到了大学，我失去了与人交往的理由，于是便不在对人感兴趣，甚至对生活本身失去了兴趣。<br>那时候对抗抑郁侵蚀的唯一方法就是晚上出去跑步，从寝室出发，一直沿着启真湖跑。<br>那段漫长的生活教会了我一个道理，实际上抑郁不过是内啡肽过低而已。一切的情绪低落都可以用慢跑来解决。</p>\n<p>然而现在还是无聊，还是没有找到活着的信念和追求，真是遗憾。</p>\n"},{"title":"2016-12-27 日志","date":"2016-12-27T11:59:07.000Z","_content":"感觉自己真是脆弱。\n何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？\n果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。\n\n电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。\n\n感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。\n比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。\n\n而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。\n内啡肽不够，整个人又开始变得很悲观。\n书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。\n对未来不报希望，不知道将来的生活有何值得期待之处。\n真是令人伤感。\n\n杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。\n明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。\n感觉我的问题就是缺乏自信。\n当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。\n从现在开始，改变自己。\n\n说的倒是容易，改变自己。\n世间最为困难的莫过于此。\n我想起异域的那句名言：\n> what can change the nature of a man?\n\n衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。\n最终，她所期待的只是解脱而已。\n\n愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。\n或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。\n\n我期待着那一天。\n","source":"_posts/2016-12-27-日志.md","raw":"---\ntitle: 2016-12-27 日志\ndate: 2016-12-27 19:59:07\ntags:\n- 日志\ncategory:\n- 日志\n---\n感觉自己真是脆弱。\n何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？\n果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。\n\n电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。\n\n感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。\n比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。\n\n而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。\n内啡肽不够，整个人又开始变得很悲观。\n书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。\n对未来不报希望，不知道将来的生活有何值得期待之处。\n真是令人伤感。\n\n杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。\n明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。\n感觉我的问题就是缺乏自信。\n当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。\n从现在开始，改变自己。\n\n说的倒是容易，改变自己。\n世间最为困难的莫过于此。\n我想起异域的那句名言：\n> what can change the nature of a man?\n\n衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。\n最终，她所期待的只是解脱而已。\n\n愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。\n或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。\n\n我期待着那一天。\n","slug":"2016-12-27-日志","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gh000593ta3680e0e1","content":"<p>感觉自己真是脆弱。<br>何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？<br>果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。</p>\n<p>电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。</p>\n<p>感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。<br>比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。</p>\n<p>而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。<br>内啡肽不够，整个人又开始变得很悲观。<br>书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。<br>对未来不报希望，不知道将来的生活有何值得期待之处。<br>真是令人伤感。</p>\n<p>杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。<br>明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。<br>感觉我的问题就是缺乏自信。<br>当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。<br>从现在开始，改变自己。</p>\n<p>说的倒是容易，改变自己。<br>世间最为困难的莫过于此。<br>我想起异域的那句名言：</p>\n<blockquote>\n<p>what can change the nature of a man?</p>\n</blockquote>\n<p>衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。<br>最终，她所期待的只是解脱而已。</p>\n<p>愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。<br>或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。</p>\n<p>我期待着那一天。</p>\n","excerpt":"","more":"<p>感觉自己真是脆弱。<br>何时能变得心灵强大起来呢？为什经历一点点的挫折就开始怀疑起周围的一切呢？<br>果然我需要佛学的慰藉，不断磨砺心性，以便自己能够豁达地面对各种遭遇吧。</p>\n<p>电信定位的问题解决了，然而并没有问什么原因，这可能会成为不解之谜了。</p>\n<p>感觉工作效率低，总是忍不住去浏览一些新的技术，老是妄想自己以后有技术了会多么多么富有；然而却做的很少。<br>比如想要写一个秒级的端口扫描器，基于python实现；一开始定的方案是协程+asyncio框架，然而后者看了半天依旧费解。光是一个yeild就让我寻思半天依旧不得其门而入。</p>\n<p>而且感觉最近几天身体状况都不太好，因为天气原因好几天没去跑步了。<br>内啡肽不够，整个人又开始变得很悲观。<br>书什么的也都看不进去，翻了一半的安娜卡列尼娜好久都没动了。<br>对未来不报希望，不知道将来的生活有何值得期待之处。<br>真是令人伤感。</p>\n<p>杭州的天气开始变得很冷很冷，晚上就算穿着两条裤子都觉得关节有点疼。空调开不了制暖，感觉这个冬天不好过。<br>明年争取多赚点钱，然后租一个小套间，能做饭的那种，然后再谈一个女朋友；这样我的生活就能慢慢步入正规。<br>感觉我的问题就是缺乏自信。<br>当然也可能不完全对，我最缺乏的是活着的欲望，感觉一直都是随遇而安，并没有主动地想要去追求什么东西。这大概是童年的挫折养成的一种“习得性无助”吧。<br>从现在开始，改变自己。</p>\n<p>说的倒是容易，改变自己。<br>世间最为困难的莫过于此。<br>我想起异域的那句名言：</p>\n<blockquote>\n<p>what can change the nature of a man?</p>\n</blockquote>\n<p>衰老而臃肿的解谜者彷徨在贫民巷，等待着无名者一次又一次的到来，而每次造访，后者——她的爱人，身上的伤痕越来越多，并且失去的记忆也越来越多。<br>最终，她所期待的只是解脱而已。</p>\n<p>愈发感觉异域的世界观和故事情节很和我的胃口，然而那庞大的文字量和游戏时间已经让我无法再次完成体会。<br>或许再过一段时间，我能静下心来，去再次体会那孤独、绝望最后却伴随救赎的史诗吧。</p>\n<p>我期待着那一天。</p>\n"},{"title":"2017-01-01 日志","date":"2017-01-01T02:29:16.000Z","_content":"新的一年开始了。\n\n也好几天没写日志了。\n\n几天前纠结的事情已经解决了，心境又开始变得轻松起来。\n","source":"_posts/2017-01-01-日志.md","raw":"---\ntitle: 2017-01-01 日志\ndate: 2017-01-01 10:29:16\ntags:\n- 日志\ncategory:\n- 日志\n---\n新的一年开始了。\n\n也好几天没写日志了。\n\n几天前纠结的事情已经解决了，心境又开始变得轻松起来。\n","slug":"2017-01-01-日志","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gk000793tajvuym5u2","content":"<p>新的一年开始了。</p>\n<p>也好几天没写日志了。</p>\n<p>几天前纠结的事情已经解决了，心境又开始变得轻松起来。</p>\n","excerpt":"","more":"<p>新的一年开始了。</p>\n<p>也好几天没写日志了。</p>\n<p>几天前纠结的事情已经解决了，心境又开始变得轻松起来。</p>\n"},{"title":"C程序设计语言：第一章","date":"2017-02-05T12:38:48.000Z","_content":"\n#### 题记\n总算要开始回头看C语言了，太久没用这门语言了，大概有5年了吧。\n真是时光荏苒，但是为了进步，以及更高的编程愉悦感，我还是得忍着重新学习的痛苦，再回顾一遍这本经典的《C程序语言设计》了。\n这里就记录一下心得，还有一些有趣的习题解答吧。\n\n#### 练习\n\n##### 1.5.2字符计数\n\n```C\n\n#include<stdio.h>\n\n/*\n * 练习1-8 编写一个统计空格、制表符、与换行符个数的程序\n * */\n\nint main(void){\n    long nc = 0;\n    int ch;\n    while( (ch = getchar())!= EOF ){\n        if(ch=='\\n' || ch=='\\t' || ch==' '){\n            nc++;\n        }\n    }\n    printf(\"%ld\\n\", nc);\n    return 0;\n}\n```\n\n```C\n#include<stdio.h>\n\n/*\n * 练习1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格替代\n * */\n\nint main(void){\n    int pre;\n    int curr;\n    curr = getchar();\n    pre = -1;\n\n    while(curr!=EOF){\n        if(curr!=' '||pre!=' '){\n            putchar(curr);\n        }\n        pre = curr;\n        curr = getchar();\n    }\n\n    return 0;\n}\n\n```\n\n\n\n","source":"_posts/C程序设计语言：第一章.md","raw":"---\ntitle: C程序设计语言：第一章\ndate: 2017-02-05 20:38:48\ntags:\n- C\n- 阅读笔记\ncategory:\n- C程序语言设计\n---\n\n#### 题记\n总算要开始回头看C语言了，太久没用这门语言了，大概有5年了吧。\n真是时光荏苒，但是为了进步，以及更高的编程愉悦感，我还是得忍着重新学习的痛苦，再回顾一遍这本经典的《C程序语言设计》了。\n这里就记录一下心得，还有一些有趣的习题解答吧。\n\n#### 练习\n\n##### 1.5.2字符计数\n\n```C\n\n#include<stdio.h>\n\n/*\n * 练习1-8 编写一个统计空格、制表符、与换行符个数的程序\n * */\n\nint main(void){\n    long nc = 0;\n    int ch;\n    while( (ch = getchar())!= EOF ){\n        if(ch=='\\n' || ch=='\\t' || ch==' '){\n            nc++;\n        }\n    }\n    printf(\"%ld\\n\", nc);\n    return 0;\n}\n```\n\n```C\n#include<stdio.h>\n\n/*\n * 练习1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格替代\n * */\n\nint main(void){\n    int pre;\n    int curr;\n    curr = getchar();\n    pre = -1;\n\n    while(curr!=EOF){\n        if(curr!=' '||pre!=' '){\n            putchar(curr);\n        }\n        pre = curr;\n        curr = getchar();\n    }\n\n    return 0;\n}\n\n```\n\n\n\n","slug":"C程序设计语言：第一章","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gn000893tabcy2xa5e","content":"<h4 id=\"题记\"><a href=\"#题记\" class=\"headerlink\" title=\"题记\"></a>题记</h4><p>总算要开始回头看C语言了，太久没用这门语言了，大概有5年了吧。<br>真是时光荏苒，但是为了进步，以及更高的编程愉悦感，我还是得忍着重新学习的痛苦，再回顾一遍这本经典的《C程序语言设计》了。<br>这里就记录一下心得，还有一些有趣的习题解答吧。</p>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><h5 id=\"1-5-2字符计数\"><a href=\"#1-5-2字符计数\" class=\"headerlink\" title=\"1.5.2字符计数\"></a>1.5.2字符计数</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 练习1-8 编写一个统计空格、制表符、与换行符个数的程序</div><div class=\"line\"> * */</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> nc = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> ch;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (ch = getchar())!= EOF )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(ch==<span class=\"string\">'\\n'</span> || ch==<span class=\"string\">'\\t'</span> || ch==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">            nc++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld\\n\"</span>, nc);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 练习1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格替代</div><div class=\"line\"> * */</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pre;</div><div class=\"line\">    <span class=\"keyword\">int</span> curr;</div><div class=\"line\">    curr = getchar();</div><div class=\"line\">    pre = <span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(curr!=EOF)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(curr!=<span class=\"string\">' '</span>||pre!=<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">            <span class=\"built_in\">putchar</span>(curr);</div><div class=\"line\">        &#125;</div><div class=\"line\">        pre = curr;</div><div class=\"line\">        curr = getchar();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"题记\"><a href=\"#题记\" class=\"headerlink\" title=\"题记\"></a>题记</h4><p>总算要开始回头看C语言了，太久没用这门语言了，大概有5年了吧。<br>真是时光荏苒，但是为了进步，以及更高的编程愉悦感，我还是得忍着重新学习的痛苦，再回顾一遍这本经典的《C程序语言设计》了。<br>这里就记录一下心得，还有一些有趣的习题解答吧。</p>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><h5 id=\"1-5-2字符计数\"><a href=\"#1-5-2字符计数\" class=\"headerlink\" title=\"1.5.2字符计数\"></a>1.5.2字符计数</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 练习1-8 编写一个统计空格、制表符、与换行符个数的程序</div><div class=\"line\"> * */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> nc = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> ch;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (ch = getchar())!= EOF )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(ch==<span class=\"string\">'\\n'</span> || ch==<span class=\"string\">'\\t'</span> || ch==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">            nc++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld\\n\"</span>, nc);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 练习1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格替代</div><div class=\"line\"> * */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pre;</div><div class=\"line\">    <span class=\"keyword\">int</span> curr;</div><div class=\"line\">    curr = getchar();</div><div class=\"line\">    pre = <span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(curr!=EOF)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(curr!=<span class=\"string\">' '</span>||pre!=<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">            <span class=\"built_in\">putchar</span>(curr);</div><div class=\"line\">        &#125;</div><div class=\"line\">        pre = curr;</div><div class=\"line\">        curr = getchar();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"TOMCAT假死分析","date":"2017-01-05T12:29:14.000Z","_content":"#### 现象\n+ tomcat假死，无法响应任何请求。\n+ CPU、内存等均无告警，假死之后CPU占用率变得很低。\n+ 无任何异常日志，CLOSE_WATI数正常。\n+ 静态资源也无法访问\n+ 通过命令查看线程数\n\n```\nps -ef|grep tomcat --获取进程ID\nps -T -p <pid>|wc -l -- 获取tomcat下线程数\n```\n\n发现有近1500个线程，这已经到达tomcat线程上限。\n\n#### 获取DUMP日志\n因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.\n\n```\nkill -3 <pid>\n```\n\n这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。\n因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。\n\n```\necho \"\">catalina.out -- 这个命令也可以用于运行时释放日志\n```\n\n拿到DUMP后，问题开始明朗起来：\n\n```\n\"http-bio-443-exec-1151\" daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n            at java.lang.Object.wait(Object.java:503)\n                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)\n                    - locked <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)\n                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)\n                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)\n                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)\n                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)\n                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)\n                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)\n                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)\n                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)\n\n\n```\n\n有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。\n反查数据库中的连接数:\n\n```\nSELECT COUNT(1) FROM GV$SESSION WHERE machine = '主机名'\n```\n\n结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。\n说明数据库连接池泄露了。\n\n#### 分析\n应用框架采用的是spring+mybatis+dbcp1.4。\n由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。\ngoogle之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。\n但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？\n难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？\n如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。\n但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。\n所以最好的解决方式是找到连接泄漏的位置。\n通过采用DBCP配置：\n\n```\nmaxWait=5000\nremoveAbandoned=true\nremoveAbandonedTimeout=60\nlogAbandoned=true\n```\n\n来定位问题代码的位置。\n设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。\n\n#### 继续跟踪\n目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。\n\n#### 终于找到问题了\n\n很偶然的一次排查，我注意到了假死之后的tomcat的Thread Dump中，居然有一百多个线程还处于runable的状态！\n而且这些线程全都是案件证据文件上传、下载的线程！这样一来就和FTP服务器有关了。\n\n这样整个问题出现的逻辑也就清楚了，步骤如下：\n+ 上传文件的方法外面使用了Spring的@Transactional注解，这样就导致只有当事务提交之后，该数据库连接才能关闭\n+ FTP地址需要从数据库中获取，所以该方法会打开数据库连接；并且文件上传成功后需要在证据表中插入一条记录\n+ 出于某种原因，上传文件的线程无法正常结束(不可能是文件过大的原因，因为客户端会判断当文件大于30M时，会访问专门的文件服务器进行分块上传)\n+ 于是Spring无法关闭这个连接，这个连接一直无法被回收到连接池\n+ 无法关闭的连接越来越多，到达设定的上限（100个，堆栈日志相符）；应用无法再获取任何数据库连接，导致相应操作全部挂起，线程处于WAITING状态\n+ 等待状态的线程累计，到达tomcat分配上限，假死\n+ 注意，443端口还是能正常访问静态资源，这是因为不同端口实际上用的线程池并不是同一个\n\n#### 解决方案\n\n+ Transactional的必要性值得怀疑\n+ 本质问题是为什么FTP线程无法结束，需要分析是服务器原因，还是代码原因\n+ 暴力解法：设定定时器，超时直接结束FTP线程\n\n#### 后续\n\n将FTP改为被动模式上传，问题解决。\n\n```java\n// 代码是瞎写的，意会即可\nFtpClient client = new FtpClient();\nclient.enterPasvmode();\n```\n\n","source":"_posts/TOMCAT假死分析.md","raw":"---\ntitle: TOMCAT假死分析\ndate: 2017-01-05 20:29:14\ntags:\n- tomcat\n- dbcp\ncategory:\n- CODE\n---\n#### 现象\n+ tomcat假死，无法响应任何请求。\n+ CPU、内存等均无告警，假死之后CPU占用率变得很低。\n+ 无任何异常日志，CLOSE_WATI数正常。\n+ 静态资源也无法访问\n+ 通过命令查看线程数\n\n```\nps -ef|grep tomcat --获取进程ID\nps -T -p <pid>|wc -l -- 获取tomcat下线程数\n```\n\n发现有近1500个线程，这已经到达tomcat线程上限。\n\n#### 获取DUMP日志\n因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.\n\n```\nkill -3 <pid>\n```\n\n这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。\n因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。\n\n```\necho \"\">catalina.out -- 这个命令也可以用于运行时释放日志\n```\n\n拿到DUMP后，问题开始明朗起来：\n\n```\n\"http-bio-443-exec-1151\" daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n            at java.lang.Object.wait(Object.java:503)\n                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)\n                    - locked <0x00000007f5b040f8> (a org.apache.commons.pool.impl.GenericObjectPool$Latch)\n                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)\n                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)\n                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)\n                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)\n                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)\n                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)\n                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)\n                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)\n                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)\n\n\n```\n\n有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。\n反查数据库中的连接数:\n\n```\nSELECT COUNT(1) FROM GV$SESSION WHERE machine = '主机名'\n```\n\n结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。\n说明数据库连接池泄露了。\n\n#### 分析\n应用框架采用的是spring+mybatis+dbcp1.4。\n由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。\ngoogle之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。\n但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？\n难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？\n如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。\n但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。\n所以最好的解决方式是找到连接泄漏的位置。\n通过采用DBCP配置：\n\n```\nmaxWait=5000\nremoveAbandoned=true\nremoveAbandonedTimeout=60\nlogAbandoned=true\n```\n\n来定位问题代码的位置。\n设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。\n\n#### 继续跟踪\n目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。\n\n#### 终于找到问题了\n\n很偶然的一次排查，我注意到了假死之后的tomcat的Thread Dump中，居然有一百多个线程还处于runable的状态！\n而且这些线程全都是案件证据文件上传、下载的线程！这样一来就和FTP服务器有关了。\n\n这样整个问题出现的逻辑也就清楚了，步骤如下：\n+ 上传文件的方法外面使用了Spring的@Transactional注解，这样就导致只有当事务提交之后，该数据库连接才能关闭\n+ FTP地址需要从数据库中获取，所以该方法会打开数据库连接；并且文件上传成功后需要在证据表中插入一条记录\n+ 出于某种原因，上传文件的线程无法正常结束(不可能是文件过大的原因，因为客户端会判断当文件大于30M时，会访问专门的文件服务器进行分块上传)\n+ 于是Spring无法关闭这个连接，这个连接一直无法被回收到连接池\n+ 无法关闭的连接越来越多，到达设定的上限（100个，堆栈日志相符）；应用无法再获取任何数据库连接，导致相应操作全部挂起，线程处于WAITING状态\n+ 等待状态的线程累计，到达tomcat分配上限，假死\n+ 注意，443端口还是能正常访问静态资源，这是因为不同端口实际上用的线程池并不是同一个\n\n#### 解决方案\n\n+ Transactional的必要性值得怀疑\n+ 本质问题是为什么FTP线程无法结束，需要分析是服务器原因，还是代码原因\n+ 暴力解法：设定定时器，超时直接结束FTP线程\n\n#### 后续\n\n将FTP改为被动模式上传，问题解决。\n\n```java\n// 代码是瞎写的，意会即可\nFtpClient client = new FtpClient();\nclient.enterPasvmode();\n```\n\n","slug":"TOMCAT假死分析","published":1,"updated":"2017-03-08T11:31:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gt000a93tazpix4fmv","content":"<h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><ul>\n<li>tomcat假死，无法响应任何请求。</li>\n<li>CPU、内存等均无告警，假死之后CPU占用率变得很低。</li>\n<li>无任何异常日志，CLOSE_WATI数正常。</li>\n<li>静态资源也无法访问</li>\n<li>通过命令查看线程数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef|grep tomcat --获取进程ID</div><div class=\"line\">ps -T -p &lt;pid&gt;|wc -l -- 获取tomcat下线程数</div></pre></td></tr></table></figure>\n<p>发现有近1500个线程，这已经到达tomcat线程上限。</p>\n<h4 id=\"获取DUMP日志\"><a href=\"#获取DUMP日志\" class=\"headerlink\" title=\"获取DUMP日志\"></a>获取DUMP日志</h4><p>因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -3 &lt;pid&gt;</div></pre></td></tr></table></figure>\n<p>这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。<br>因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&quot;&gt;catalina.out -- 这个命令也可以用于运行时释放日志</div></pre></td></tr></table></figure>\n<p>拿到DUMP后，问题开始明朗起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;http-bio-443-exec-1151&quot; daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]</div><div class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</div><div class=\"line\">    at java.lang.Object.wait(Native Method)</div><div class=\"line\">        - waiting on &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">            at java.lang.Object.wait(Object.java:503)</div><div class=\"line\">                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)</div><div class=\"line\">                    - locked &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)</div><div class=\"line\">                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</div><div class=\"line\">                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)</div><div class=\"line\">                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)</div><div class=\"line\">                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</div><div class=\"line\">                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)</div><div class=\"line\">                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)</div><div class=\"line\">                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)</div><div class=\"line\">                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class=\"line\">                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)</div></pre></td></tr></table></figure>\n<p>有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。<br>反查数据库中的连接数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(1) FROM GV$SESSION WHERE machine = &apos;主机名&apos;</div></pre></td></tr></table></figure>\n<p>结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。<br>说明数据库连接池泄露了。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>应用框架采用的是spring+mybatis+dbcp1.4。<br>由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。<br>google之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。<br>但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？<br>难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？<br>如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。<br>但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。<br>所以最好的解决方式是找到连接泄漏的位置。<br>通过采用DBCP配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxWait=5000</div><div class=\"line\">removeAbandoned=true</div><div class=\"line\">removeAbandonedTimeout=60</div><div class=\"line\">logAbandoned=true</div></pre></td></tr></table></figure>\n<p>来定位问题代码的位置。<br>设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。</p>\n<h4 id=\"继续跟踪\"><a href=\"#继续跟踪\" class=\"headerlink\" title=\"继续跟踪\"></a>继续跟踪</h4><p>目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。</p>\n<h4 id=\"终于找到问题了\"><a href=\"#终于找到问题了\" class=\"headerlink\" title=\"终于找到问题了\"></a>终于找到问题了</h4><p>很偶然的一次排查，我注意到了假死之后的tomcat的Thread Dump中，居然有一百多个线程还处于runable的状态！<br>而且这些线程全都是案件证据文件上传、下载的线程！这样一来就和FTP服务器有关了。</p>\n<p>这样整个问题出现的逻辑也就清楚了，步骤如下：</p>\n<ul>\n<li>上传文件的方法外面使用了Spring的@Transactional注解，这样就导致只有当事务提交之后，该数据库连接才能关闭</li>\n<li>FTP地址需要从数据库中获取，所以该方法会打开数据库连接；并且文件上传成功后需要在证据表中插入一条记录</li>\n<li>出于某种原因，上传文件的线程无法正常结束(不可能是文件过大的原因，因为客户端会判断当文件大于30M时，会访问专门的文件服务器进行分块上传)</li>\n<li>于是Spring无法关闭这个连接，这个连接一直无法被回收到连接池</li>\n<li>无法关闭的连接越来越多，到达设定的上限（100个，堆栈日志相符）；应用无法再获取任何数据库连接，导致相应操作全部挂起，线程处于WAITING状态</li>\n<li>等待状态的线程累计，到达tomcat分配上限，假死</li>\n<li>注意，443端口还是能正常访问静态资源，这是因为不同端口实际上用的线程池并不是同一个</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>Transactional的必要性值得怀疑</li>\n<li>本质问题是为什么FTP线程无法结束，需要分析是服务器原因，还是代码原因</li>\n<li>暴力解法：设定定时器，超时直接结束FTP线程</li>\n</ul>\n<h4 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h4><p>将FTP改为被动模式上传，问题解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 代码是瞎写的，意会即可</span></div><div class=\"line\">FtpClient client = <span class=\"keyword\">new</span> FtpClient();</div><div class=\"line\">client.enterPasvmode();</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><ul>\n<li>tomcat假死，无法响应任何请求。</li>\n<li>CPU、内存等均无告警，假死之后CPU占用率变得很低。</li>\n<li>无任何异常日志，CLOSE_WATI数正常。</li>\n<li>静态资源也无法访问</li>\n<li>通过命令查看线程数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef|grep tomcat --获取进程ID</div><div class=\"line\">ps -T -p &lt;pid&gt;|wc -l -- 获取tomcat下线程数</div></pre></td></tr></table></figure>\n<p>发现有近1500个线程，这已经到达tomcat线程上限。</p>\n<h4 id=\"获取DUMP日志\"><a href=\"#获取DUMP日志\" class=\"headerlink\" title=\"获取DUMP日志\"></a>获取DUMP日志</h4><p>因为生产环境没有装JDK，只有JRE环境，费了好一番功夫才发现有个神奇的命令.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -3 &lt;pid&gt;</div></pre></td></tr></table></figure>\n<p>这个命令并不会导致进程被杀，并且会将相应的线程堆栈信息和大致的内存占用情况输出到tomcat目录下的catalina.out文件中。<br>因为这个文件往往较大，所以DUMP前可以先清空这个日志文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&quot;&gt;catalina.out -- 这个命令也可以用于运行时释放日志</div></pre></td></tr></table></figure>\n<p>拿到DUMP后，问题开始明朗起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;http-bio-443-exec-1151&quot; daemon prio=10 tid=0x00007fd1c96c9000 nid=0x26cb in Object.wait() [0x00007fd0f914e000]</div><div class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</div><div class=\"line\">    at java.lang.Object.wait(Native Method)</div><div class=\"line\">        - waiting on &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">            at java.lang.Object.wait(Object.java:503)</div><div class=\"line\">                at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1118)</div><div class=\"line\">                    - locked &lt;0x00000007f5b040f8&gt; (a org.apache.commons.pool.impl.GenericObjectPool$Latch)</div><div class=\"line\">                        at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)</div><div class=\"line\">                            at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</div><div class=\"line\">                                at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164)</div><div class=\"line\">                                    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:205)</div><div class=\"line\">                                        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</div><div class=\"line\">                                            at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:420)</div><div class=\"line\">                                                at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:257)</div><div class=\"line\">                                                    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)</div><div class=\"line\">                                                        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class=\"line\">                                                            at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:646)</div></pre></td></tr></table></figure>\n<p>有近千个线程处于WAITING状态，都是卡在获取数据库连接这一步上。<br>反查数据库中的连接数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(1) FROM GV$SESSION WHERE machine = &apos;主机名&apos;</div></pre></td></tr></table></figure>\n<p>结果为100，并且这些连接全部处于INACTIVE状态，而数据库连接池配置的maxActive数就是100个。<br>说明数据库连接池泄露了。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>应用框架采用的是spring+mybatis+dbcp1.4。<br>由于并不需要手动关闭数据库连接，所以业务代码导致这个问题的可能性不大。<br>google之后发现dbcp官方JIRA上也report了这个问题，据说是一个BUG，升级到1.5.3版本能解决这个问题。<br>但是奇怪的是，应用已经正常运行两年多了，为什么最近才出现这个问题呢？<br>难道是因为割接的地市越来越多，导致服务器压力增大，进而导致这个问题的发生？<br>如果是DBCP的BUG，那么升级版本或者替换为C3P0应该能够解决这个问题。<br>但我不确定是否真的是这个原因，或许业务代码在某种极为巧合的情形下的确会导致连接无法正常关闭；那么鲁莽的行为只会掩盖这个问题，并且在日后造成更大的麻烦。<br>所以最好的解决方式是找到连接泄漏的位置。<br>通过采用DBCP配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxWait=5000</div><div class=\"line\">removeAbandoned=true</div><div class=\"line\">removeAbandonedTimeout=60</div><div class=\"line\">logAbandoned=true</div></pre></td></tr></table></figure>\n<p>来定位问题代码的位置。<br>设置的具体含义在官方文档上有，简言之，这样设置之后，在一定条件下，会触发DBCP的回收机制。当一个连接超过一定时间没有被使用，那么就视为abandoned连接，删除之，并记录下该连接的上下文和调用栈。</p>\n<h4 id=\"继续跟踪\"><a href=\"#继续跟踪\" class=\"headerlink\" title=\"继续跟踪\"></a>继续跟踪</h4><p>目前连接数还没有到达指标处，继续跟踪，希望明天就能解决这个问题。</p>\n<h4 id=\"终于找到问题了\"><a href=\"#终于找到问题了\" class=\"headerlink\" title=\"终于找到问题了\"></a>终于找到问题了</h4><p>很偶然的一次排查，我注意到了假死之后的tomcat的Thread Dump中，居然有一百多个线程还处于runable的状态！<br>而且这些线程全都是案件证据文件上传、下载的线程！这样一来就和FTP服务器有关了。</p>\n<p>这样整个问题出现的逻辑也就清楚了，步骤如下：</p>\n<ul>\n<li>上传文件的方法外面使用了Spring的@Transactional注解，这样就导致只有当事务提交之后，该数据库连接才能关闭</li>\n<li>FTP地址需要从数据库中获取，所以该方法会打开数据库连接；并且文件上传成功后需要在证据表中插入一条记录</li>\n<li>出于某种原因，上传文件的线程无法正常结束(不可能是文件过大的原因，因为客户端会判断当文件大于30M时，会访问专门的文件服务器进行分块上传)</li>\n<li>于是Spring无法关闭这个连接，这个连接一直无法被回收到连接池</li>\n<li>无法关闭的连接越来越多，到达设定的上限（100个，堆栈日志相符）；应用无法再获取任何数据库连接，导致相应操作全部挂起，线程处于WAITING状态</li>\n<li>等待状态的线程累计，到达tomcat分配上限，假死</li>\n<li>注意，443端口还是能正常访问静态资源，这是因为不同端口实际上用的线程池并不是同一个</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>Transactional的必要性值得怀疑</li>\n<li>本质问题是为什么FTP线程无法结束，需要分析是服务器原因，还是代码原因</li>\n<li>暴力解法：设定定时器，超时直接结束FTP线程</li>\n</ul>\n<h4 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h4><p>将FTP改为被动模式上传，问题解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 代码是瞎写的，意会即可</span></div><div class=\"line\">FtpClient client = <span class=\"keyword\">new</span> FtpClient();</div><div class=\"line\">client.enterPasvmode();</div></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-06T12:28:08.000Z","updated":"2017-03-06T12:28:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gv000e93ta1ucyb9nf","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"lucune初体验","date":"2017-01-27T08:21:50.000Z","_content":"\n为了方便以后查看应用服务器的日志，我准备自行开发一个提供全文检索功能的app。\napache果然无所不能，已经有了现成的解决方案。有开发包，有封装好的app。我选择了lucune这个开发包。\n经过了几次搜索我大致了解了lucune的使用流程。第一步，也就是最关键的一步，是生成全文的索引，这涉及到了切词，不过也不用想得太麻烦，毕竟apache都已经帮我们解决了最困难的问题。\n我们所需要做的，只是学习如何操作这个开发包。\n\n","source":"_posts/lucune初体验.md","raw":"---\ntitle: lucune初体验\ndate: 2017-01-27 16:21:50\ntags:\n- 全文检索\ncategory:\n- lucune\n---\n\n为了方便以后查看应用服务器的日志，我准备自行开发一个提供全文检索功能的app。\napache果然无所不能，已经有了现成的解决方案。有开发包，有封装好的app。我选择了lucune这个开发包。\n经过了几次搜索我大致了解了lucune的使用流程。第一步，也就是最关键的一步，是生成全文的索引，这涉及到了切词，不过也不用想得太麻烦，毕竟apache都已经帮我们解决了最困难的问题。\n我们所需要做的，只是学习如何操作这个开发包。\n\n","slug":"lucune初体验","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6gx000h93tadhlkzdaz","content":"<p>为了方便以后查看应用服务器的日志，我准备自行开发一个提供全文检索功能的app。<br>apache果然无所不能，已经有了现成的解决方案。有开发包，有封装好的app。我选择了lucune这个开发包。<br>经过了几次搜索我大致了解了lucune的使用流程。第一步，也就是最关键的一步，是生成全文的索引，这涉及到了切词，不过也不用想得太麻烦，毕竟apache都已经帮我们解决了最困难的问题。<br>我们所需要做的，只是学习如何操作这个开发包。</p>\n","excerpt":"","more":"<p>为了方便以后查看应用服务器的日志，我准备自行开发一个提供全文检索功能的app。<br>apache果然无所不能，已经有了现成的解决方案。有开发包，有封装好的app。我选择了lucune这个开发包。<br>经过了几次搜索我大致了解了lucune的使用流程。第一步，也就是最关键的一步，是生成全文的索引，这涉及到了切词，不过也不用想得太麻烦，毕竟apache都已经帮我们解决了最困难的问题。<br>我们所需要做的，只是学习如何操作这个开发包。</p>\n"},{"title":"mac开发环境搭建小记","date":"2017-01-27T01:49:11.000Z","_content":"\n悲剧，昨晚写的东西全没了。只能重新写一遍了。\n\n想说的东西不多，就是买了个apple air。手感还可以，键盘没有想象中的那么糟糕。\n\n系统很好用，漂亮的UI以及bash shell都很好，结合了windows的桌面和linux的快捷和强大。\n\n然后就是安装了一些程序员会用到的软件包。\n\n```\niTerm2 -- 强大的shell窗口，用来代替mac自身的命令行窗口，结合了imux的功能。由于暂时还不熟悉，以后再说\nzsh --bash的超集，方便好用的命令自动补全功能，而且还不用区分大小写\noh my zsh --集成化的zsh配置，傻瓜也能用zsh了\nalfred --生产力提高工具，能快捷地打开程序、自动搜索文件以及url等等，感觉360的某个功能就是抄它的\nbrew --自动化安装工具，通过brew install wget这种语法，方便快捷地安装linux程序\ngit --必装\nshadowssocks --必装，科学上网的神器，配合几块钱一个月的ssh服务器，能用的很爽。另外注意配置gi代理时，协议应为socks5\njdk --oracle官网有安装包，有mac版，但感觉不好用，像是自动档，都没有JAVA_HOME和CLASSPATH之类的东西。\neclipse --想来想去还是装了，编译用的内存应该多点，这个小本子应该够用，这几天准备看看全文搜索。然后搭建一个日志全文检索的服务器，这样以后排查问题就方便多了\ntomcat --解压即可\n\nnodejs --感觉nodejs很有前途，而且脚本语言应该能在这台本子上跑得流畅一点，至少比java编译半天要好\nhexo --写博客必备，另外注意的是，在最新版的node环境下，安装hexo的命令比较特殊：npm install hexo --no-optional --save\n\n```\n\n其他的用到之后再装吧。\n\n用来来感觉很流畅，基本没有感受到卡顿。电池没有宣传的那么神，顶多用5个小时吧，就写代码和听音乐。\n\n其他就没有什么了。\n\n\n另外这次放假，需要完成的目标有：\n+ 熟悉lucune这个全文检索开发包\n+ 写小说，至少写个3万字吧。真的应该开始赚点零花钱了，工资只有那么点钱，根本不够用。\n+ 熟悉mac系统，撰写各种方便开发的脚本。\n\n","source":"_posts/mac开发环境搭建小记.md","raw":"---\ntitle: mac开发环境搭建小记\ndate: 2017-01-27 09:49:11\ntags:\n- mac\ncategory:\n- 日志\n---\n\n悲剧，昨晚写的东西全没了。只能重新写一遍了。\n\n想说的东西不多，就是买了个apple air。手感还可以，键盘没有想象中的那么糟糕。\n\n系统很好用，漂亮的UI以及bash shell都很好，结合了windows的桌面和linux的快捷和强大。\n\n然后就是安装了一些程序员会用到的软件包。\n\n```\niTerm2 -- 强大的shell窗口，用来代替mac自身的命令行窗口，结合了imux的功能。由于暂时还不熟悉，以后再说\nzsh --bash的超集，方便好用的命令自动补全功能，而且还不用区分大小写\noh my zsh --集成化的zsh配置，傻瓜也能用zsh了\nalfred --生产力提高工具，能快捷地打开程序、自动搜索文件以及url等等，感觉360的某个功能就是抄它的\nbrew --自动化安装工具，通过brew install wget这种语法，方便快捷地安装linux程序\ngit --必装\nshadowssocks --必装，科学上网的神器，配合几块钱一个月的ssh服务器，能用的很爽。另外注意配置gi代理时，协议应为socks5\njdk --oracle官网有安装包，有mac版，但感觉不好用，像是自动档，都没有JAVA_HOME和CLASSPATH之类的东西。\neclipse --想来想去还是装了，编译用的内存应该多点，这个小本子应该够用，这几天准备看看全文搜索。然后搭建一个日志全文检索的服务器，这样以后排查问题就方便多了\ntomcat --解压即可\n\nnodejs --感觉nodejs很有前途，而且脚本语言应该能在这台本子上跑得流畅一点，至少比java编译半天要好\nhexo --写博客必备，另外注意的是，在最新版的node环境下，安装hexo的命令比较特殊：npm install hexo --no-optional --save\n\n```\n\n其他的用到之后再装吧。\n\n用来来感觉很流畅，基本没有感受到卡顿。电池没有宣传的那么神，顶多用5个小时吧，就写代码和听音乐。\n\n其他就没有什么了。\n\n\n另外这次放假，需要完成的目标有：\n+ 熟悉lucune这个全文检索开发包\n+ 写小说，至少写个3万字吧。真的应该开始赚点零花钱了，工资只有那么点钱，根本不够用。\n+ 熟悉mac系统，撰写各种方便开发的脚本。\n\n","slug":"mac开发环境搭建小记","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6h0000l93tagn91n7sw","content":"<p>悲剧，昨晚写的东西全没了。只能重新写一遍了。</p>\n<p>想说的东西不多，就是买了个apple air。手感还可以，键盘没有想象中的那么糟糕。</p>\n<p>系统很好用，漂亮的UI以及bash shell都很好，结合了windows的桌面和linux的快捷和强大。</p>\n<p>然后就是安装了一些程序员会用到的软件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">iTerm2 -- 强大的shell窗口，用来代替mac自身的命令行窗口，结合了imux的功能。由于暂时还不熟悉，以后再说</div><div class=\"line\">zsh --bash的超集，方便好用的命令自动补全功能，而且还不用区分大小写</div><div class=\"line\">oh my zsh --集成化的zsh配置，傻瓜也能用zsh了</div><div class=\"line\">alfred --生产力提高工具，能快捷地打开程序、自动搜索文件以及url等等，感觉360的某个功能就是抄它的</div><div class=\"line\">brew --自动化安装工具，通过brew install wget这种语法，方便快捷地安装linux程序</div><div class=\"line\">git --必装</div><div class=\"line\">shadowssocks --必装，科学上网的神器，配合几块钱一个月的ssh服务器，能用的很爽。另外注意配置gi代理时，协议应为socks5</div><div class=\"line\">jdk --oracle官网有安装包，有mac版，但感觉不好用，像是自动档，都没有JAVA_HOME和CLASSPATH之类的东西。</div><div class=\"line\">eclipse --想来想去还是装了，编译用的内存应该多点，这个小本子应该够用，这几天准备看看全文搜索。然后搭建一个日志全文检索的服务器，这样以后排查问题就方便多了</div><div class=\"line\">tomcat --解压即可</div><div class=\"line\"></div><div class=\"line\">nodejs --感觉nodejs很有前途，而且脚本语言应该能在这台本子上跑得流畅一点，至少比java编译半天要好</div><div class=\"line\">hexo --写博客必备，另外注意的是，在最新版的node环境下，安装hexo的命令比较特殊：npm install hexo --no-optional --save</div></pre></td></tr></table></figure>\n<p>其他的用到之后再装吧。</p>\n<p>用来来感觉很流畅，基本没有感受到卡顿。电池没有宣传的那么神，顶多用5个小时吧，就写代码和听音乐。</p>\n<p>其他就没有什么了。</p>\n<p>另外这次放假，需要完成的目标有：</p>\n<ul>\n<li>熟悉lucune这个全文检索开发包</li>\n<li>写小说，至少写个3万字吧。真的应该开始赚点零花钱了，工资只有那么点钱，根本不够用。</li>\n<li>熟悉mac系统，撰写各种方便开发的脚本。</li>\n</ul>\n","excerpt":"","more":"<p>悲剧，昨晚写的东西全没了。只能重新写一遍了。</p>\n<p>想说的东西不多，就是买了个apple air。手感还可以，键盘没有想象中的那么糟糕。</p>\n<p>系统很好用，漂亮的UI以及bash shell都很好，结合了windows的桌面和linux的快捷和强大。</p>\n<p>然后就是安装了一些程序员会用到的软件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">iTerm2 -- 强大的shell窗口，用来代替mac自身的命令行窗口，结合了imux的功能。由于暂时还不熟悉，以后再说</div><div class=\"line\">zsh --bash的超集，方便好用的命令自动补全功能，而且还不用区分大小写</div><div class=\"line\">oh my zsh --集成化的zsh配置，傻瓜也能用zsh了</div><div class=\"line\">alfred --生产力提高工具，能快捷地打开程序、自动搜索文件以及url等等，感觉360的某个功能就是抄它的</div><div class=\"line\">brew --自动化安装工具，通过brew install wget这种语法，方便快捷地安装linux程序</div><div class=\"line\">git --必装</div><div class=\"line\">shadowssocks --必装，科学上网的神器，配合几块钱一个月的ssh服务器，能用的很爽。另外注意配置gi代理时，协议应为socks5</div><div class=\"line\">jdk --oracle官网有安装包，有mac版，但感觉不好用，像是自动档，都没有JAVA_HOME和CLASSPATH之类的东西。</div><div class=\"line\">eclipse --想来想去还是装了，编译用的内存应该多点，这个小本子应该够用，这几天准备看看全文搜索。然后搭建一个日志全文检索的服务器，这样以后排查问题就方便多了</div><div class=\"line\">tomcat --解压即可</div><div class=\"line\"></div><div class=\"line\">nodejs --感觉nodejs很有前途，而且脚本语言应该能在这台本子上跑得流畅一点，至少比java编译半天要好</div><div class=\"line\">hexo --写博客必备，另外注意的是，在最新版的node环境下，安装hexo的命令比较特殊：npm install hexo --no-optional --save</div></pre></td></tr></table></figure>\n<p>其他的用到之后再装吧。</p>\n<p>用来来感觉很流畅，基本没有感受到卡顿。电池没有宣传的那么神，顶多用5个小时吧，就写代码和听音乐。</p>\n<p>其他就没有什么了。</p>\n<p>另外这次放假，需要完成的目标有：</p>\n<ul>\n<li>熟悉lucune这个全文检索开发包</li>\n<li>写小说，至少写个3万字吧。真的应该开始赚点零花钱了，工资只有那么点钱，根本不够用。</li>\n<li>熟悉mac系统，撰写各种方便开发的脚本。</li>\n</ul>\n"},{"title":"动态数据源路由容易掉进去的坑","date":"2017-01-23T22:19:27.000Z","_content":"\n#### 场景\n\n由于业务要求需要在不同的生产库、查询库（查询库中又包含多个子查询库）之间动态切换，所以使用了Spring提供的动态数据源路由功能。\n这个功能的基本原理，是将具体的数据库和一个枚举类作为键值对，由Spring提供的DynamicDataSourceRouting进行管理，然后将作为key的枚举类保存在ThreadLocal中以保证线程独立。这样在业务需要时，可以动态的根据一些条件，比如用户所处的行政区划之类的变量，动态的改变当前数据源。\n\n一开始，只有生产库和查询库两个数据源之间进行切换，后来根据业务需求，需要分摊统计查询的压力，将查询库切分为11个地市的子查询库。\n看起来，没有任何问题，只是在切换数据源时，多了一层切换操作，然后奇怪的问题发生了：本来应该插入到生产库的数据，被随机地插入到了不同的子查询库中。\n\n#### 代码还原\n\n以下是精简之后的代码:\n\n```\n//生产库、查询库所对应的key\npublic enum DataSourceKind{\n    READ, WRITE\n}\n\n//各个查询库所对应的key\npublic enum ReadDataSourceKind{\n    NingBo, WenZhou, JiaXing, ShaoXing...//略\n}\n```\n\n```\n//持有ThreadLocal的类，提供对于线程独立变量的访问\npublic class DataSourceHolder{\n    private static final ThreadLocal<DataSourceKind> dataSource = new ThreadLocal<DataSourceKind>();\n\n    //获取当前数据源\n    public static DataSourceKind getDataSource(){ return dataSource.get();}\n    //设置当前数据源\n    public static void setDataSource(DataSourceKind kind){ dataSource.set(kind);}\n\n}\n\n//略过各个查询库的holder\n```\n\n```\n//继承Spring的动态数据源路由，复写获取数据源key方法\npublic class MyDynamicDataSourceRouting extends DynamicDataSourceRouting{\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceHolder.getDataSource();\n    }\n}\n\n//略过查询库的routing\n```\n\n具体的切换用到了SpringAOP，大致就是定义一个@DbReadOnly注解，然后当检测到有方法使用了该注解，就进行数据源的切换。\n具体的业务场景中，只有很少一部分统计分析的请求会使用查询库，并且所有的@DbReadOnly注解基本上都是在Controller层。\n第一步先切换到READ， 然后根据当前登录用户所处行政区划来进行查询库的切换，等到这个请求完成之后，再在finally中切换回默认的生产库来。\n\n```\npublic Object proceed(Proceed obj){\n    DataSourceHolder.setDataSource(DataSourceKind.READ);\n    User user = SessionUtils.getCurrentUser();    //获取当前登录的用户\n    String xzqh = user.getXzqh();\n    if(xzqh.equals(XzqhConsts.JinHua)){ ReadDataSourceHolder.setDataSource(ReadDataSourceKind.JinHua);}\n    else if(xzqh.equals(XzqhConsts.WenZhou){ ReadDataSourceHolder.setDataSource(ReadDataSourceKind.WenZhou);})\n    ....//略\n    \n    try{\n        return obj.proceed();\n    }catch(Exception e){\n        e.printStackTrace();\n    }finally{\n        DataSourceHolder.setDataSource(DataSourceKind.WRITE);    //重置为生产库\n    }\n\n}\n```\n\n#### 分析与提示\n\n有经验的老司机大概已经看出了问题所在， 数据之所以会写入到查询库的原因实在是很可笑。\n还没明白过来的兄弟可以先看看接下来的提示。\n\n对于这个问题，我一开始根本摸不着头脑，因为在我的理解中，就算有线程没有切换回生产库，这个线程也会因为请求结束而被结束。\n更何况涉及到查询库的那些请求根本不涉及INSERT操作。\n\n更何况怎么可能不切换回生产库呢？finally中的代码无论如何，就算抛运行时异常，也应该是会执行的啊？\n\n难道一个线程会被多个请求同时使用？或者ThreadLocal并不是真正的ThreadLocal?而是会在线程之间互相影响？\n\n最后绝望的我甚至还开始怀疑起枚举类是否是线程安全的。\n\n我也是被问题迷糊了头脑，实际上这个问题非常简单，我不过是在一堆错误的前提下做着无望的挣扎，而没有去怀疑自己所坚信的这些前提是否是成立的。\n\n我觉得当遇到一个看似匪夷所思，甚至毫无可能发生的异常时，需要有清醒的头脑，来反过来质疑看似坚固的前提。\n\n下面是两个小小的提示：\n+ 线程真的会因为请求结束而结束吗？\n+ 上面finally的代码真的必然后执行吗？\n\n#### 柳暗花明\n\n很遗憾，对于上面两个问题的答案，其实都是否定的。\n\n事实上，Tomcat存在一个线程池机制，对于完成了请求的线程，并不会立即释放，而是回收到线程池中；并且，很关键的一点是，tomcat并不会清空ThreadLocal变量。\n\n第二个问题，非常可笑的，虽然finally的确必然会执行，然而这是有条件的：如果程序在try代码块之外抛了异常，那么finally将不会被执行。\n\n至此，一切谜题的答案已经展现在眼前。\n\n用户的session丢失，会导致获取xzqh那一行代码抛空指针异常，然而之前已经切换为READ库，所以当前线程已经指向了查询库，又因为抛运行时异常，所以请求结束；\n接着，线程被回收，进入线程池；过了不知道多久，有一个倒霉的请求被分配到了这个线程上执行，然后因为数据源并不会切换到WRITE中，所以INSERT操作会进入到查询库。\n\n#### 总结\n\n看似不可思议的问题， 既然真真切切的发生了，那么必然又一个合乎逻辑的解释；看似不可思议，不过是因为你误解了某些前提。\n另外我这么久也没看出问题所在，仅仅是以为我基础不够，否则如果我早知道tomcat有这么玄妙的线程池机制，那么我应该很快就能想到问题的关键点所在。\n\n不过，总的来说，这是一场很有趣的解谜体验。：）\n\n","source":"_posts/动态数据源路由容易掉进去的坑.md","raw":"---\ntitle: 动态数据源路由容易掉进去的坑\ndate: 2017-01-24 06:19:27\ntags:\n- BUG\n- Spring\n- DynamicDataSourceRouting\ncategory:\n- zjipst\n---\n\n#### 场景\n\n由于业务要求需要在不同的生产库、查询库（查询库中又包含多个子查询库）之间动态切换，所以使用了Spring提供的动态数据源路由功能。\n这个功能的基本原理，是将具体的数据库和一个枚举类作为键值对，由Spring提供的DynamicDataSourceRouting进行管理，然后将作为key的枚举类保存在ThreadLocal中以保证线程独立。这样在业务需要时，可以动态的根据一些条件，比如用户所处的行政区划之类的变量，动态的改变当前数据源。\n\n一开始，只有生产库和查询库两个数据源之间进行切换，后来根据业务需求，需要分摊统计查询的压力，将查询库切分为11个地市的子查询库。\n看起来，没有任何问题，只是在切换数据源时，多了一层切换操作，然后奇怪的问题发生了：本来应该插入到生产库的数据，被随机地插入到了不同的子查询库中。\n\n#### 代码还原\n\n以下是精简之后的代码:\n\n```\n//生产库、查询库所对应的key\npublic enum DataSourceKind{\n    READ, WRITE\n}\n\n//各个查询库所对应的key\npublic enum ReadDataSourceKind{\n    NingBo, WenZhou, JiaXing, ShaoXing...//略\n}\n```\n\n```\n//持有ThreadLocal的类，提供对于线程独立变量的访问\npublic class DataSourceHolder{\n    private static final ThreadLocal<DataSourceKind> dataSource = new ThreadLocal<DataSourceKind>();\n\n    //获取当前数据源\n    public static DataSourceKind getDataSource(){ return dataSource.get();}\n    //设置当前数据源\n    public static void setDataSource(DataSourceKind kind){ dataSource.set(kind);}\n\n}\n\n//略过各个查询库的holder\n```\n\n```\n//继承Spring的动态数据源路由，复写获取数据源key方法\npublic class MyDynamicDataSourceRouting extends DynamicDataSourceRouting{\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceHolder.getDataSource();\n    }\n}\n\n//略过查询库的routing\n```\n\n具体的切换用到了SpringAOP，大致就是定义一个@DbReadOnly注解，然后当检测到有方法使用了该注解，就进行数据源的切换。\n具体的业务场景中，只有很少一部分统计分析的请求会使用查询库，并且所有的@DbReadOnly注解基本上都是在Controller层。\n第一步先切换到READ， 然后根据当前登录用户所处行政区划来进行查询库的切换，等到这个请求完成之后，再在finally中切换回默认的生产库来。\n\n```\npublic Object proceed(Proceed obj){\n    DataSourceHolder.setDataSource(DataSourceKind.READ);\n    User user = SessionUtils.getCurrentUser();    //获取当前登录的用户\n    String xzqh = user.getXzqh();\n    if(xzqh.equals(XzqhConsts.JinHua)){ ReadDataSourceHolder.setDataSource(ReadDataSourceKind.JinHua);}\n    else if(xzqh.equals(XzqhConsts.WenZhou){ ReadDataSourceHolder.setDataSource(ReadDataSourceKind.WenZhou);})\n    ....//略\n    \n    try{\n        return obj.proceed();\n    }catch(Exception e){\n        e.printStackTrace();\n    }finally{\n        DataSourceHolder.setDataSource(DataSourceKind.WRITE);    //重置为生产库\n    }\n\n}\n```\n\n#### 分析与提示\n\n有经验的老司机大概已经看出了问题所在， 数据之所以会写入到查询库的原因实在是很可笑。\n还没明白过来的兄弟可以先看看接下来的提示。\n\n对于这个问题，我一开始根本摸不着头脑，因为在我的理解中，就算有线程没有切换回生产库，这个线程也会因为请求结束而被结束。\n更何况涉及到查询库的那些请求根本不涉及INSERT操作。\n\n更何况怎么可能不切换回生产库呢？finally中的代码无论如何，就算抛运行时异常，也应该是会执行的啊？\n\n难道一个线程会被多个请求同时使用？或者ThreadLocal并不是真正的ThreadLocal?而是会在线程之间互相影响？\n\n最后绝望的我甚至还开始怀疑起枚举类是否是线程安全的。\n\n我也是被问题迷糊了头脑，实际上这个问题非常简单，我不过是在一堆错误的前提下做着无望的挣扎，而没有去怀疑自己所坚信的这些前提是否是成立的。\n\n我觉得当遇到一个看似匪夷所思，甚至毫无可能发生的异常时，需要有清醒的头脑，来反过来质疑看似坚固的前提。\n\n下面是两个小小的提示：\n+ 线程真的会因为请求结束而结束吗？\n+ 上面finally的代码真的必然后执行吗？\n\n#### 柳暗花明\n\n很遗憾，对于上面两个问题的答案，其实都是否定的。\n\n事实上，Tomcat存在一个线程池机制，对于完成了请求的线程，并不会立即释放，而是回收到线程池中；并且，很关键的一点是，tomcat并不会清空ThreadLocal变量。\n\n第二个问题，非常可笑的，虽然finally的确必然会执行，然而这是有条件的：如果程序在try代码块之外抛了异常，那么finally将不会被执行。\n\n至此，一切谜题的答案已经展现在眼前。\n\n用户的session丢失，会导致获取xzqh那一行代码抛空指针异常，然而之前已经切换为READ库，所以当前线程已经指向了查询库，又因为抛运行时异常，所以请求结束；\n接着，线程被回收，进入线程池；过了不知道多久，有一个倒霉的请求被分配到了这个线程上执行，然后因为数据源并不会切换到WRITE中，所以INSERT操作会进入到查询库。\n\n#### 总结\n\n看似不可思议的问题， 既然真真切切的发生了，那么必然又一个合乎逻辑的解释；看似不可思议，不过是因为你误解了某些前提。\n另外我这么久也没看出问题所在，仅仅是以为我基础不够，否则如果我早知道tomcat有这么玄妙的线程池机制，那么我应该很快就能想到问题的关键点所在。\n\n不过，总的来说，这是一场很有趣的解谜体验。：）\n\n","slug":"动态数据源路由容易掉进去的坑","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6h5000n93tabfxyygzy","content":"<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>由于业务要求需要在不同的生产库、查询库（查询库中又包含多个子查询库）之间动态切换，所以使用了Spring提供的动态数据源路由功能。<br>这个功能的基本原理，是将具体的数据库和一个枚举类作为键值对，由Spring提供的DynamicDataSourceRouting进行管理，然后将作为key的枚举类保存在ThreadLocal中以保证线程独立。这样在业务需要时，可以动态的根据一些条件，比如用户所处的行政区划之类的变量，动态的改变当前数据源。</p>\n<p>一开始，只有生产库和查询库两个数据源之间进行切换，后来根据业务需求，需要分摊统计查询的压力，将查询库切分为11个地市的子查询库。<br>看起来，没有任何问题，只是在切换数据源时，多了一层切换操作，然后奇怪的问题发生了：本来应该插入到生产库的数据，被随机地插入到了不同的子查询库中。</p>\n<h4 id=\"代码还原\"><a href=\"#代码还原\" class=\"headerlink\" title=\"代码还原\"></a>代码还原</h4><p>以下是精简之后的代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//生产库、查询库所对应的key</div><div class=\"line\">public enum DataSourceKind&#123;</div><div class=\"line\">    READ, WRITE</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//各个查询库所对应的key</div><div class=\"line\">public enum ReadDataSourceKind&#123;</div><div class=\"line\">    NingBo, WenZhou, JiaXing, ShaoXing...//略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//持有ThreadLocal的类，提供对于线程独立变量的访问</div><div class=\"line\">public class DataSourceHolder&#123;</div><div class=\"line\">    private static final ThreadLocal&lt;DataSourceKind&gt; dataSource = new ThreadLocal&lt;DataSourceKind&gt;();</div><div class=\"line\"></div><div class=\"line\">    //获取当前数据源</div><div class=\"line\">    public static DataSourceKind getDataSource()&#123; return dataSource.get();&#125;</div><div class=\"line\">    //设置当前数据源</div><div class=\"line\">    public static void setDataSource(DataSourceKind kind)&#123; dataSource.set(kind);&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//略过各个查询库的holder</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//继承Spring的动态数据源路由，复写获取数据源key方法</div><div class=\"line\">public class MyDynamicDataSourceRouting extends DynamicDataSourceRouting&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected Object determineCurrentLookupKey() &#123;</div><div class=\"line\">        return DataSourceHolder.getDataSource();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//略过查询库的routing</div></pre></td></tr></table></figure>\n<p>具体的切换用到了SpringAOP，大致就是定义一个@DbReadOnly注解，然后当检测到有方法使用了该注解，就进行数据源的切换。<br>具体的业务场景中，只有很少一部分统计分析的请求会使用查询库，并且所有的@DbReadOnly注解基本上都是在Controller层。<br>第一步先切换到READ， 然后根据当前登录用户所处行政区划来进行查询库的切换，等到这个请求完成之后，再在finally中切换回默认的生产库来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Object proceed(Proceed obj)&#123;</div><div class=\"line\">    DataSourceHolder.setDataSource(DataSourceKind.READ);</div><div class=\"line\">    User user = SessionUtils.getCurrentUser();    //获取当前登录的用户</div><div class=\"line\">    String xzqh = user.getXzqh();</div><div class=\"line\">    if(xzqh.equals(XzqhConsts.JinHua))&#123; ReadDataSourceHolder.setDataSource(ReadDataSourceKind.JinHua);&#125;</div><div class=\"line\">    else if(xzqh.equals(XzqhConsts.WenZhou)&#123; ReadDataSourceHolder.setDataSource(ReadDataSourceKind.WenZhou);&#125;)</div><div class=\"line\">    ....//略</div><div class=\"line\">    </div><div class=\"line\">    try&#123;</div><div class=\"line\">        return obj.proceed();</div><div class=\"line\">    &#125;catch(Exception e)&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;finally&#123;</div><div class=\"line\">        DataSourceHolder.setDataSource(DataSourceKind.WRITE);    //重置为生产库</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"分析与提示\"><a href=\"#分析与提示\" class=\"headerlink\" title=\"分析与提示\"></a>分析与提示</h4><p>有经验的老司机大概已经看出了问题所在， 数据之所以会写入到查询库的原因实在是很可笑。<br>还没明白过来的兄弟可以先看看接下来的提示。</p>\n<p>对于这个问题，我一开始根本摸不着头脑，因为在我的理解中，就算有线程没有切换回生产库，这个线程也会因为请求结束而被结束。<br>更何况涉及到查询库的那些请求根本不涉及INSERT操作。</p>\n<p>更何况怎么可能不切换回生产库呢？finally中的代码无论如何，就算抛运行时异常，也应该是会执行的啊？</p>\n<p>难道一个线程会被多个请求同时使用？或者ThreadLocal并不是真正的ThreadLocal?而是会在线程之间互相影响？</p>\n<p>最后绝望的我甚至还开始怀疑起枚举类是否是线程安全的。</p>\n<p>我也是被问题迷糊了头脑，实际上这个问题非常简单，我不过是在一堆错误的前提下做着无望的挣扎，而没有去怀疑自己所坚信的这些前提是否是成立的。</p>\n<p>我觉得当遇到一个看似匪夷所思，甚至毫无可能发生的异常时，需要有清醒的头脑，来反过来质疑看似坚固的前提。</p>\n<p>下面是两个小小的提示：</p>\n<ul>\n<li>线程真的会因为请求结束而结束吗？</li>\n<li>上面finally的代码真的必然后执行吗？</li>\n</ul>\n<h4 id=\"柳暗花明\"><a href=\"#柳暗花明\" class=\"headerlink\" title=\"柳暗花明\"></a>柳暗花明</h4><p>很遗憾，对于上面两个问题的答案，其实都是否定的。</p>\n<p>事实上，Tomcat存在一个线程池机制，对于完成了请求的线程，并不会立即释放，而是回收到线程池中；并且，很关键的一点是，tomcat并不会清空ThreadLocal变量。</p>\n<p>第二个问题，非常可笑的，虽然finally的确必然会执行，然而这是有条件的：如果程序在try代码块之外抛了异常，那么finally将不会被执行。</p>\n<p>至此，一切谜题的答案已经展现在眼前。</p>\n<p>用户的session丢失，会导致获取xzqh那一行代码抛空指针异常，然而之前已经切换为READ库，所以当前线程已经指向了查询库，又因为抛运行时异常，所以请求结束；<br>接着，线程被回收，进入线程池；过了不知道多久，有一个倒霉的请求被分配到了这个线程上执行，然后因为数据源并不会切换到WRITE中，所以INSERT操作会进入到查询库。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>看似不可思议的问题， 既然真真切切的发生了，那么必然又一个合乎逻辑的解释；看似不可思议，不过是因为你误解了某些前提。<br>另外我这么久也没看出问题所在，仅仅是以为我基础不够，否则如果我早知道tomcat有这么玄妙的线程池机制，那么我应该很快就能想到问题的关键点所在。</p>\n<p>不过，总的来说，这是一场很有趣的解谜体验。：）</p>\n","excerpt":"","more":"<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>由于业务要求需要在不同的生产库、查询库（查询库中又包含多个子查询库）之间动态切换，所以使用了Spring提供的动态数据源路由功能。<br>这个功能的基本原理，是将具体的数据库和一个枚举类作为键值对，由Spring提供的DynamicDataSourceRouting进行管理，然后将作为key的枚举类保存在ThreadLocal中以保证线程独立。这样在业务需要时，可以动态的根据一些条件，比如用户所处的行政区划之类的变量，动态的改变当前数据源。</p>\n<p>一开始，只有生产库和查询库两个数据源之间进行切换，后来根据业务需求，需要分摊统计查询的压力，将查询库切分为11个地市的子查询库。<br>看起来，没有任何问题，只是在切换数据源时，多了一层切换操作，然后奇怪的问题发生了：本来应该插入到生产库的数据，被随机地插入到了不同的子查询库中。</p>\n<h4 id=\"代码还原\"><a href=\"#代码还原\" class=\"headerlink\" title=\"代码还原\"></a>代码还原</h4><p>以下是精简之后的代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//生产库、查询库所对应的key</div><div class=\"line\">public enum DataSourceKind&#123;</div><div class=\"line\">    READ, WRITE</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//各个查询库所对应的key</div><div class=\"line\">public enum ReadDataSourceKind&#123;</div><div class=\"line\">    NingBo, WenZhou, JiaXing, ShaoXing...//略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//持有ThreadLocal的类，提供对于线程独立变量的访问</div><div class=\"line\">public class DataSourceHolder&#123;</div><div class=\"line\">    private static final ThreadLocal&lt;DataSourceKind&gt; dataSource = new ThreadLocal&lt;DataSourceKind&gt;();</div><div class=\"line\"></div><div class=\"line\">    //获取当前数据源</div><div class=\"line\">    public static DataSourceKind getDataSource()&#123; return dataSource.get();&#125;</div><div class=\"line\">    //设置当前数据源</div><div class=\"line\">    public static void setDataSource(DataSourceKind kind)&#123; dataSource.set(kind);&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//略过各个查询库的holder</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//继承Spring的动态数据源路由，复写获取数据源key方法</div><div class=\"line\">public class MyDynamicDataSourceRouting extends DynamicDataSourceRouting&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected Object determineCurrentLookupKey() &#123;</div><div class=\"line\">        return DataSourceHolder.getDataSource();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//略过查询库的routing</div></pre></td></tr></table></figure>\n<p>具体的切换用到了SpringAOP，大致就是定义一个@DbReadOnly注解，然后当检测到有方法使用了该注解，就进行数据源的切换。<br>具体的业务场景中，只有很少一部分统计分析的请求会使用查询库，并且所有的@DbReadOnly注解基本上都是在Controller层。<br>第一步先切换到READ， 然后根据当前登录用户所处行政区划来进行查询库的切换，等到这个请求完成之后，再在finally中切换回默认的生产库来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Object proceed(Proceed obj)&#123;</div><div class=\"line\">    DataSourceHolder.setDataSource(DataSourceKind.READ);</div><div class=\"line\">    User user = SessionUtils.getCurrentUser();    //获取当前登录的用户</div><div class=\"line\">    String xzqh = user.getXzqh();</div><div class=\"line\">    if(xzqh.equals(XzqhConsts.JinHua))&#123; ReadDataSourceHolder.setDataSource(ReadDataSourceKind.JinHua);&#125;</div><div class=\"line\">    else if(xzqh.equals(XzqhConsts.WenZhou)&#123; ReadDataSourceHolder.setDataSource(ReadDataSourceKind.WenZhou);&#125;)</div><div class=\"line\">    ....//略</div><div class=\"line\">    </div><div class=\"line\">    try&#123;</div><div class=\"line\">        return obj.proceed();</div><div class=\"line\">    &#125;catch(Exception e)&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;finally&#123;</div><div class=\"line\">        DataSourceHolder.setDataSource(DataSourceKind.WRITE);    //重置为生产库</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"分析与提示\"><a href=\"#分析与提示\" class=\"headerlink\" title=\"分析与提示\"></a>分析与提示</h4><p>有经验的老司机大概已经看出了问题所在， 数据之所以会写入到查询库的原因实在是很可笑。<br>还没明白过来的兄弟可以先看看接下来的提示。</p>\n<p>对于这个问题，我一开始根本摸不着头脑，因为在我的理解中，就算有线程没有切换回生产库，这个线程也会因为请求结束而被结束。<br>更何况涉及到查询库的那些请求根本不涉及INSERT操作。</p>\n<p>更何况怎么可能不切换回生产库呢？finally中的代码无论如何，就算抛运行时异常，也应该是会执行的啊？</p>\n<p>难道一个线程会被多个请求同时使用？或者ThreadLocal并不是真正的ThreadLocal?而是会在线程之间互相影响？</p>\n<p>最后绝望的我甚至还开始怀疑起枚举类是否是线程安全的。</p>\n<p>我也是被问题迷糊了头脑，实际上这个问题非常简单，我不过是在一堆错误的前提下做着无望的挣扎，而没有去怀疑自己所坚信的这些前提是否是成立的。</p>\n<p>我觉得当遇到一个看似匪夷所思，甚至毫无可能发生的异常时，需要有清醒的头脑，来反过来质疑看似坚固的前提。</p>\n<p>下面是两个小小的提示：</p>\n<ul>\n<li>线程真的会因为请求结束而结束吗？</li>\n<li>上面finally的代码真的必然后执行吗？</li>\n</ul>\n<h4 id=\"柳暗花明\"><a href=\"#柳暗花明\" class=\"headerlink\" title=\"柳暗花明\"></a>柳暗花明</h4><p>很遗憾，对于上面两个问题的答案，其实都是否定的。</p>\n<p>事实上，Tomcat存在一个线程池机制，对于完成了请求的线程，并不会立即释放，而是回收到线程池中；并且，很关键的一点是，tomcat并不会清空ThreadLocal变量。</p>\n<p>第二个问题，非常可笑的，虽然finally的确必然会执行，然而这是有条件的：如果程序在try代码块之外抛了异常，那么finally将不会被执行。</p>\n<p>至此，一切谜题的答案已经展现在眼前。</p>\n<p>用户的session丢失，会导致获取xzqh那一行代码抛空指针异常，然而之前已经切换为READ库，所以当前线程已经指向了查询库，又因为抛运行时异常，所以请求结束；<br>接着，线程被回收，进入线程池；过了不知道多久，有一个倒霉的请求被分配到了这个线程上执行，然后因为数据源并不会切换到WRITE中，所以INSERT操作会进入到查询库。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>看似不可思议的问题， 既然真真切切的发生了，那么必然又一个合乎逻辑的解释；看似不可思议，不过是因为你误解了某些前提。<br>另外我这么久也没看出问题所在，仅仅是以为我基础不够，否则如果我早知道tomcat有这么玄妙的线程池机制，那么我应该很快就能想到问题的关键点所在。</p>\n<p>不过，总的来说，这是一场很有趣的解谜体验。：）</p>\n"},{"title":"hexo+ubuntu+github博客环境搭建","date":"2016-12-26T15:28:05.000Z","_content":"总算把环境给搭好了。\n架构为：hexo+github，系统为ubuntu。\n\n### 源代码管理\n首先在github创建一个仓库，建立两个分支：master，gh-pages。\nmaster用来存放源代码，gh-pages用来存放编译后的html静态页面文件。\n前者手动管理，后者配置在conf中由hexo进行管理。\n+ 创建文件夹\n```\nmkdir repository\ncd repository\n```\n\n+ 建立git环境\n```\ngit clone https://github.com/LiangKim/myblog.git\n```\n这样在repository文件夹下就自动多了myblog文件夹。\n此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.\n\n### hexo\n+ 建立hexo环境\n进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。\n要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。\n```\nsudo npm install hexo -g\nnpm install hexo-deployer-git --save\n```\n第一行命令安装hexo环境，第二行命令安装了git插件。\n进入myblog目录:\n```\nhexo init\n```\n这一步代码执行了\n","source":"_posts/博客环境搭建.md","raw":"---\ntitle: hexo+ubuntu+github博客环境搭建\ndate: 2016-12-26 23:28:05\ntags:\n- hexo\n- ubuntu\n- shadowsocks\ncategory:\n- 通用技术\n---\n总算把环境给搭好了。\n架构为：hexo+github，系统为ubuntu。\n\n### 源代码管理\n首先在github创建一个仓库，建立两个分支：master，gh-pages。\nmaster用来存放源代码，gh-pages用来存放编译后的html静态页面文件。\n前者手动管理，后者配置在conf中由hexo进行管理。\n+ 创建文件夹\n```\nmkdir repository\ncd repository\n```\n\n+ 建立git环境\n```\ngit clone https://github.com/LiangKim/myblog.git\n```\n这样在repository文件夹下就自动多了myblog文件夹。\n此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.\n\n### hexo\n+ 建立hexo环境\n进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。\n要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。\n```\nsudo npm install hexo -g\nnpm install hexo-deployer-git --save\n```\n第一行命令安装hexo环境，第二行命令安装了git插件。\n进入myblog目录:\n```\nhexo init\n```\n这一步代码执行了\n","slug":"博客环境搭建","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6h9000r93tazs0xw5vv","content":"<p>总算把环境给搭好了。<br>架构为：hexo+github，系统为ubuntu。</p>\n<h3 id=\"源代码管理\"><a href=\"#源代码管理\" class=\"headerlink\" title=\"源代码管理\"></a>源代码管理</h3><p>首先在github创建一个仓库，建立两个分支：master，gh-pages。<br>master用来存放源代码，gh-pages用来存放编译后的html静态页面文件。<br>前者手动管理，后者配置在conf中由hexo进行管理。</p>\n<ul>\n<li><p>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir repository</div><div class=\"line\">cd repository</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立git环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/LiangKim/myblog.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样在repository文件夹下就自动多了myblog文件夹。<br>此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.</p>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><ul>\n<li>建立hexo环境<br>进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。<br>要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install hexo -g</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一行命令安装hexo环境，第二行命令安装了git插件。<br>进入myblog目录:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>这一步代码执行了</p>\n","excerpt":"","more":"<p>总算把环境给搭好了。<br>架构为：hexo+github，系统为ubuntu。</p>\n<h3 id=\"源代码管理\"><a href=\"#源代码管理\" class=\"headerlink\" title=\"源代码管理\"></a>源代码管理</h3><p>首先在github创建一个仓库，建立两个分支：master，gh-pages。<br>master用来存放源代码，gh-pages用来存放编译后的html静态页面文件。<br>前者手动管理，后者配置在conf中由hexo进行管理。</p>\n<ul>\n<li><p>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir repository</div><div class=\"line\">cd repository</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立git环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/LiangKim/myblog.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样在repository文件夹下就自动多了myblog文件夹。<br>此时该文件夹应该是空的，如果不是也可以把其中无用文件删了然后提交.</p>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><ul>\n<li>建立hexo环境<br>进行到此步时，默认已经安装好了nodejs，npm等依赖。如有不懂可以google之。<br>要注意的是，在ubuntu环境下，安装nodejs最好通过编译源代码安装。apt的方式总会出莫名其妙的问题。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install hexo -g</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一行命令安装hexo环境，第二行命令安装了git插件。<br>进入myblog目录:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>这一步代码执行了</p>\n"},{"title":"如何阅读一本书","date":"2017-02-05T13:53:51.000Z","_content":"\n虽然手上已经有kindle了，但是还是忍不住要买实体书。昨天在京东上淘了四本书：《如何阅读一本书》、《肠子》、《数据结构C》、《人生的智慧》\n肠子，这本书在大学时候就已经拜读过，当时觉得很惊艳，作者那冷酷的笔触和活灵活现的表达力让我印象深刻；既然我准备写点小说，那么这个作者应该是一个不错的模仿对象。而且他还有一些关于写作的小技巧发布，感觉还是挺有道理的。\n人生的智慧，叔本华的亲民之作。悲观如叔本华，也是将他不可一世的悲观隐藏了起来，暂时地对“世俗性”妥协，写了这本劝人丰富自己精神世界的小书（实际上也不是专门写的，而是从另一部晚年著作中摘录出来的）。主要阐述的是一个人如何获取到幸福。\n苦闷如我，还是需要这样的拯救。叔本华收小乘佛教影响颇深，所以他的哲学理论也带着一种无我超然的意味在里面，不可全信，但是里面对于幸福的分析还是颇有益处。这个等我读完了改天会专门写一篇读书笔记。关键点是他的三分法：自我、所有之物、他人眼中的自己。在他看来自我乃是唯一重要之事，这也契合他唯意志论的哲学观点；但是在这三种中，他人眼中的自己这一类描写最多，恐怕也与他的人生际遇有关。早年他的哲学论著无人问津，郁郁不得志自然要安慰自己说荣誉、社会地位实际上不那么重要。这样看来，这本书实际上是他整个人生的自传吧。\n数据结构没什么好说的，就算不是为了考研，恶补一下计算机知识也是必要的。毕竟我不可能满足于现状，我需要更强才行。现在的我只是一个毫无上进心的码农而已。离程序员还差得远了，至少程序员根本不差钱。\n\n好了，终于说到今天的重点了，那就是《如何阅读一本书》。\n其实很多人并不会阅读，按照本书的四分法，阅读分为四个层次：基础阅读，检视阅读，分析阅读，比较阅读。四个层次互相包含，很多人其实仅仅止步于基础阅读，也就是说自从小学毕业以后，他们的阅读能力便没有再提升了。\n阅读实际上是极为重要的，不仅增长了知识，也丰富了一个人的内涵，读万卷书，行万里路；若无法行万里路，那么万卷书就必不可少了。只有读书多了，才能成为一个真正有趣的人。\n并且，光是读书还不够，毕竟有很多书呆子，看似读了很多书，然而实际上一点用了没有。他们的阅读是无效的，仅仅是读过，却没有真正消化所读的书。\n我想区别就在于，阅读是否主动。主动的阅读能使人精神振奋，免于昏睡。\n而主动与否的关键就是是否能够提出问题，并且有效的回答问题。\n这本书实际上讲的就是提问题与回答问题的技巧。\n现在就摘录一下各章的要点，等我读完了之后再总结一番，日后勤加练习必定神功大成。他日笑傲江湖可也。\n\n#### 阅读的四个层次\n\n+ 基础阅读。明白书中的文字是在讲些什么\n+ 检视阅读。略读，尽快把握一本书的整体。判断这本书是否值得一读。分为两个阶段：1，系统性略读。具体实施方法就是读序、索引、目录等平时容易忽略的部分，尽快把握一本书的整体轮廓。2，粗读。大致把一本书从头到尾读一遍，遇到不懂就跳过。\n+ 分析阅读\n+ 比较阅读\n\n#### 主动性阅读的四个关键问题\n+ 这本书在讲什么\n+ 这本书是怎么讲的\n+ 这本书讲的对吗\n+ 讲的东西和我有什么关系\n","source":"_posts/如何阅读一本书.md","raw":"---\ntitle: 如何阅读一本书\ndate: 2017-02-05 21:53:51\ncategory:\n- 读书笔记\n---\n\n虽然手上已经有kindle了，但是还是忍不住要买实体书。昨天在京东上淘了四本书：《如何阅读一本书》、《肠子》、《数据结构C》、《人生的智慧》\n肠子，这本书在大学时候就已经拜读过，当时觉得很惊艳，作者那冷酷的笔触和活灵活现的表达力让我印象深刻；既然我准备写点小说，那么这个作者应该是一个不错的模仿对象。而且他还有一些关于写作的小技巧发布，感觉还是挺有道理的。\n人生的智慧，叔本华的亲民之作。悲观如叔本华，也是将他不可一世的悲观隐藏了起来，暂时地对“世俗性”妥协，写了这本劝人丰富自己精神世界的小书（实际上也不是专门写的，而是从另一部晚年著作中摘录出来的）。主要阐述的是一个人如何获取到幸福。\n苦闷如我，还是需要这样的拯救。叔本华收小乘佛教影响颇深，所以他的哲学理论也带着一种无我超然的意味在里面，不可全信，但是里面对于幸福的分析还是颇有益处。这个等我读完了改天会专门写一篇读书笔记。关键点是他的三分法：自我、所有之物、他人眼中的自己。在他看来自我乃是唯一重要之事，这也契合他唯意志论的哲学观点；但是在这三种中，他人眼中的自己这一类描写最多，恐怕也与他的人生际遇有关。早年他的哲学论著无人问津，郁郁不得志自然要安慰自己说荣誉、社会地位实际上不那么重要。这样看来，这本书实际上是他整个人生的自传吧。\n数据结构没什么好说的，就算不是为了考研，恶补一下计算机知识也是必要的。毕竟我不可能满足于现状，我需要更强才行。现在的我只是一个毫无上进心的码农而已。离程序员还差得远了，至少程序员根本不差钱。\n\n好了，终于说到今天的重点了，那就是《如何阅读一本书》。\n其实很多人并不会阅读，按照本书的四分法，阅读分为四个层次：基础阅读，检视阅读，分析阅读，比较阅读。四个层次互相包含，很多人其实仅仅止步于基础阅读，也就是说自从小学毕业以后，他们的阅读能力便没有再提升了。\n阅读实际上是极为重要的，不仅增长了知识，也丰富了一个人的内涵，读万卷书，行万里路；若无法行万里路，那么万卷书就必不可少了。只有读书多了，才能成为一个真正有趣的人。\n并且，光是读书还不够，毕竟有很多书呆子，看似读了很多书，然而实际上一点用了没有。他们的阅读是无效的，仅仅是读过，却没有真正消化所读的书。\n我想区别就在于，阅读是否主动。主动的阅读能使人精神振奋，免于昏睡。\n而主动与否的关键就是是否能够提出问题，并且有效的回答问题。\n这本书实际上讲的就是提问题与回答问题的技巧。\n现在就摘录一下各章的要点，等我读完了之后再总结一番，日后勤加练习必定神功大成。他日笑傲江湖可也。\n\n#### 阅读的四个层次\n\n+ 基础阅读。明白书中的文字是在讲些什么\n+ 检视阅读。略读，尽快把握一本书的整体。判断这本书是否值得一读。分为两个阶段：1，系统性略读。具体实施方法就是读序、索引、目录等平时容易忽略的部分，尽快把握一本书的整体轮廓。2，粗读。大致把一本书从头到尾读一遍，遇到不懂就跳过。\n+ 分析阅读\n+ 比较阅读\n\n#### 主动性阅读的四个关键问题\n+ 这本书在讲什么\n+ 这本书是怎么讲的\n+ 这本书讲的对吗\n+ 讲的东西和我有什么关系\n","slug":"如何阅读一本书","published":1,"updated":"2017-02-09T12:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj00xk6ha000u93tad40knn6y","content":"<p>虽然手上已经有kindle了，但是还是忍不住要买实体书。昨天在京东上淘了四本书：《如何阅读一本书》、《肠子》、《数据结构C》、《人生的智慧》<br>肠子，这本书在大学时候就已经拜读过，当时觉得很惊艳，作者那冷酷的笔触和活灵活现的表达力让我印象深刻；既然我准备写点小说，那么这个作者应该是一个不错的模仿对象。而且他还有一些关于写作的小技巧发布，感觉还是挺有道理的。<br>人生的智慧，叔本华的亲民之作。悲观如叔本华，也是将他不可一世的悲观隐藏了起来，暂时地对“世俗性”妥协，写了这本劝人丰富自己精神世界的小书（实际上也不是专门写的，而是从另一部晚年著作中摘录出来的）。主要阐述的是一个人如何获取到幸福。<br>苦闷如我，还是需要这样的拯救。叔本华收小乘佛教影响颇深，所以他的哲学理论也带着一种无我超然的意味在里面，不可全信，但是里面对于幸福的分析还是颇有益处。这个等我读完了改天会专门写一篇读书笔记。关键点是他的三分法：自我、所有之物、他人眼中的自己。在他看来自我乃是唯一重要之事，这也契合他唯意志论的哲学观点；但是在这三种中，他人眼中的自己这一类描写最多，恐怕也与他的人生际遇有关。早年他的哲学论著无人问津，郁郁不得志自然要安慰自己说荣誉、社会地位实际上不那么重要。这样看来，这本书实际上是他整个人生的自传吧。<br>数据结构没什么好说的，就算不是为了考研，恶补一下计算机知识也是必要的。毕竟我不可能满足于现状，我需要更强才行。现在的我只是一个毫无上进心的码农而已。离程序员还差得远了，至少程序员根本不差钱。</p>\n<p>好了，终于说到今天的重点了，那就是《如何阅读一本书》。<br>其实很多人并不会阅读，按照本书的四分法，阅读分为四个层次：基础阅读，检视阅读，分析阅读，比较阅读。四个层次互相包含，很多人其实仅仅止步于基础阅读，也就是说自从小学毕业以后，他们的阅读能力便没有再提升了。<br>阅读实际上是极为重要的，不仅增长了知识，也丰富了一个人的内涵，读万卷书，行万里路；若无法行万里路，那么万卷书就必不可少了。只有读书多了，才能成为一个真正有趣的人。<br>并且，光是读书还不够，毕竟有很多书呆子，看似读了很多书，然而实际上一点用了没有。他们的阅读是无效的，仅仅是读过，却没有真正消化所读的书。<br>我想区别就在于，阅读是否主动。主动的阅读能使人精神振奋，免于昏睡。<br>而主动与否的关键就是是否能够提出问题，并且有效的回答问题。<br>这本书实际上讲的就是提问题与回答问题的技巧。<br>现在就摘录一下各章的要点，等我读完了之后再总结一番，日后勤加练习必定神功大成。他日笑傲江湖可也。</p>\n<h4 id=\"阅读的四个层次\"><a href=\"#阅读的四个层次\" class=\"headerlink\" title=\"阅读的四个层次\"></a>阅读的四个层次</h4><ul>\n<li>基础阅读。明白书中的文字是在讲些什么</li>\n<li>检视阅读。略读，尽快把握一本书的整体。判断这本书是否值得一读。分为两个阶段：1，系统性略读。具体实施方法就是读序、索引、目录等平时容易忽略的部分，尽快把握一本书的整体轮廓。2，粗读。大致把一本书从头到尾读一遍，遇到不懂就跳过。</li>\n<li>分析阅读</li>\n<li>比较阅读</li>\n</ul>\n<h4 id=\"主动性阅读的四个关键问题\"><a href=\"#主动性阅读的四个关键问题\" class=\"headerlink\" title=\"主动性阅读的四个关键问题\"></a>主动性阅读的四个关键问题</h4><ul>\n<li>这本书在讲什么</li>\n<li>这本书是怎么讲的</li>\n<li>这本书讲的对吗</li>\n<li>讲的东西和我有什么关系</li>\n</ul>\n","excerpt":"","more":"<p>虽然手上已经有kindle了，但是还是忍不住要买实体书。昨天在京东上淘了四本书：《如何阅读一本书》、《肠子》、《数据结构C》、《人生的智慧》<br>肠子，这本书在大学时候就已经拜读过，当时觉得很惊艳，作者那冷酷的笔触和活灵活现的表达力让我印象深刻；既然我准备写点小说，那么这个作者应该是一个不错的模仿对象。而且他还有一些关于写作的小技巧发布，感觉还是挺有道理的。<br>人生的智慧，叔本华的亲民之作。悲观如叔本华，也是将他不可一世的悲观隐藏了起来，暂时地对“世俗性”妥协，写了这本劝人丰富自己精神世界的小书（实际上也不是专门写的，而是从另一部晚年著作中摘录出来的）。主要阐述的是一个人如何获取到幸福。<br>苦闷如我，还是需要这样的拯救。叔本华收小乘佛教影响颇深，所以他的哲学理论也带着一种无我超然的意味在里面，不可全信，但是里面对于幸福的分析还是颇有益处。这个等我读完了改天会专门写一篇读书笔记。关键点是他的三分法：自我、所有之物、他人眼中的自己。在他看来自我乃是唯一重要之事，这也契合他唯意志论的哲学观点；但是在这三种中，他人眼中的自己这一类描写最多，恐怕也与他的人生际遇有关。早年他的哲学论著无人问津，郁郁不得志自然要安慰自己说荣誉、社会地位实际上不那么重要。这样看来，这本书实际上是他整个人生的自传吧。<br>数据结构没什么好说的，就算不是为了考研，恶补一下计算机知识也是必要的。毕竟我不可能满足于现状，我需要更强才行。现在的我只是一个毫无上进心的码农而已。离程序员还差得远了，至少程序员根本不差钱。</p>\n<p>好了，终于说到今天的重点了，那就是《如何阅读一本书》。<br>其实很多人并不会阅读，按照本书的四分法，阅读分为四个层次：基础阅读，检视阅读，分析阅读，比较阅读。四个层次互相包含，很多人其实仅仅止步于基础阅读，也就是说自从小学毕业以后，他们的阅读能力便没有再提升了。<br>阅读实际上是极为重要的，不仅增长了知识，也丰富了一个人的内涵，读万卷书，行万里路；若无法行万里路，那么万卷书就必不可少了。只有读书多了，才能成为一个真正有趣的人。<br>并且，光是读书还不够，毕竟有很多书呆子，看似读了很多书，然而实际上一点用了没有。他们的阅读是无效的，仅仅是读过，却没有真正消化所读的书。<br>我想区别就在于，阅读是否主动。主动的阅读能使人精神振奋，免于昏睡。<br>而主动与否的关键就是是否能够提出问题，并且有效的回答问题。<br>这本书实际上讲的就是提问题与回答问题的技巧。<br>现在就摘录一下各章的要点，等我读完了之后再总结一番，日后勤加练习必定神功大成。他日笑傲江湖可也。</p>\n<h4 id=\"阅读的四个层次\"><a href=\"#阅读的四个层次\" class=\"headerlink\" title=\"阅读的四个层次\"></a>阅读的四个层次</h4><ul>\n<li>基础阅读。明白书中的文字是在讲些什么</li>\n<li>检视阅读。略读，尽快把握一本书的整体。判断这本书是否值得一读。分为两个阶段：1，系统性略读。具体实施方法就是读序、索引、目录等平时容易忽略的部分，尽快把握一本书的整体轮廓。2，粗读。大致把一本书从头到尾读一遍，遇到不懂就跳过。</li>\n<li>分析阅读</li>\n<li>比较阅读</li>\n</ul>\n<h4 id=\"主动性阅读的四个关键问题\"><a href=\"#主动性阅读的四个关键问题\" class=\"headerlink\" title=\"主动性阅读的四个关键问题\"></a>主动性阅读的四个关键问题</h4><ul>\n<li>这本书在讲什么</li>\n<li>这本书是怎么讲的</li>\n<li>这本书讲的对吗</li>\n<li>讲的东西和我有什么关系</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj00xk6gk000793tajvuym5u2","category_id":"cj00xk6gd000493tag2ms0883","_id":"cj00xk6gv000c93tao4n8zui3"},{"post_id":"cj00xk6g3000093tam5twov8n","category_id":"cj00xk6gd000493tag2ms0883","_id":"cj00xk6gx000g93tapf3cdgpp"},{"post_id":"cj00xk6g9000293ta50aeboi5","category_id":"cj00xk6gd000493tag2ms0883","_id":"cj00xk6h0000k93tayejwffse"},{"post_id":"cj00xk6gh000593ta3680e0e1","category_id":"cj00xk6gd000493tag2ms0883","_id":"cj00xk6h8000q93tao7jqvhfy"},{"post_id":"cj00xk6h0000l93tagn91n7sw","category_id":"cj00xk6gd000493tag2ms0883","_id":"cj00xk6ha000t93talx6rm9ua"},{"post_id":"cj00xk6gn000893tabcy2xa5e","category_id":"cj00xk6h2000m93takpn6hmu2","_id":"cj00xk6hf000w93ta47wfyp3k"},{"post_id":"cj00xk6gt000a93tazpix4fmv","category_id":"cj00xk6ha000s93tahmbo5bnh","_id":"cj00xk6hh001093tap3bpnalg"},{"post_id":"cj00xk6gx000h93tadhlkzdaz","category_id":"cj00xk6hf000x93ta1dg4mpq5","_id":"cj00xk6hj001493tayj1dqq4y"},{"post_id":"cj00xk6h5000n93tabfxyygzy","category_id":"cj00xk6hh001193ta22vj4rth","_id":"cj00xk6ho001893tadggfxvar"},{"post_id":"cj00xk6h9000r93tazs0xw5vv","category_id":"cj00xk6hl001593takkhvhw39","_id":"cj00xk6hq001d93ta7nht0gj2"},{"post_id":"cj00xk6ha000u93tad40knn6y","category_id":"cj00xk6hp001993tainlswmg7","_id":"cj00xk6hs001g93tacb2qje0g"}],"PostTag":[{"post_id":"cj00xk6g9000293ta50aeboi5","tag_id":"cj00xk6gj000693ta3uljmp9r","_id":"cj00xk6gv000d93taqrwnq88z"},{"post_id":"cj00xk6gh000593ta3680e0e1","tag_id":"cj00xk6gj000693ta3uljmp9r","_id":"cj00xk6h0000j93ta12grqwv2"},{"post_id":"cj00xk6gk000793tajvuym5u2","tag_id":"cj00xk6gj000693ta3uljmp9r","_id":"cj00xk6h8000p93tavwi79u6y"},{"post_id":"cj00xk6gn000893tabcy2xa5e","tag_id":"cj00xk6h7000o93taaiipd1d5","_id":"cj00xk6hg000z93tags6deltt"},{"post_id":"cj00xk6gn000893tabcy2xa5e","tag_id":"cj00xk6hc000v93tapz90hbsc","_id":"cj00xk6hi001293tarabx2q4i"},{"post_id":"cj00xk6gt000a93tazpix4fmv","tag_id":"cj00xk6hg000y93tau1ofazqj","_id":"cj00xk6ho001793tav09xaimg"},{"post_id":"cj00xk6gt000a93tazpix4fmv","tag_id":"cj00xk6hi001393taf1zxxbw8","_id":"cj00xk6hp001a93taf3azfaxb"},{"post_id":"cj00xk6gx000h93tadhlkzdaz","tag_id":"cj00xk6hn001693ta5ft6p10c","_id":"cj00xk6hq001c93ta921xv55d"},{"post_id":"cj00xk6h0000l93tagn91n7sw","tag_id":"cj00xk6hp001b93tagobnz589","_id":"cj00xk6hs001f93tandj2zn6f"},{"post_id":"cj00xk6h5000n93tabfxyygzy","tag_id":"cj00xk6hs001e93tac945cpfm","_id":"cj00xk6hv001k93taouuc6ni8"},{"post_id":"cj00xk6h5000n93tabfxyygzy","tag_id":"cj00xk6hs001h93ta60967zgu","_id":"cj00xk6hv001l93tafxuwf5cz"},{"post_id":"cj00xk6h5000n93tabfxyygzy","tag_id":"cj00xk6hu001i93taqux0meey","_id":"cj00xk6hv001n93tar8sblbtn"},{"post_id":"cj00xk6h9000r93tazs0xw5vv","tag_id":"cj00xk6hu001j93taubpw9bq3","_id":"cj00xk6hw001p93taaxlmx3le"},{"post_id":"cj00xk6h9000r93tazs0xw5vv","tag_id":"cj00xk6hv001m93tasdh28zch","_id":"cj00xk6hw001q93tap555dnkz"},{"post_id":"cj00xk6h9000r93tazs0xw5vv","tag_id":"cj00xk6hw001o93ta540retc7","_id":"cj00xk6hw001r93tawyt36exg"}],"Tag":[{"name":"日志","_id":"cj00xk6gj000693ta3uljmp9r"},{"name":"C","_id":"cj00xk6h7000o93taaiipd1d5"},{"name":"阅读笔记","_id":"cj00xk6hc000v93tapz90hbsc"},{"name":"tomcat","_id":"cj00xk6hg000y93tau1ofazqj"},{"name":"dbcp","_id":"cj00xk6hi001393taf1zxxbw8"},{"name":"全文检索","_id":"cj00xk6hn001693ta5ft6p10c"},{"name":"mac","_id":"cj00xk6hp001b93tagobnz589"},{"name":"BUG","_id":"cj00xk6hs001e93tac945cpfm"},{"name":"Spring","_id":"cj00xk6hs001h93ta60967zgu"},{"name":"DynamicDataSourceRouting","_id":"cj00xk6hu001i93taqux0meey"},{"name":"hexo","_id":"cj00xk6hu001j93taubpw9bq3"},{"name":"ubuntu","_id":"cj00xk6hv001m93tasdh28zch"},{"name":"shadowsocks","_id":"cj00xk6hw001o93ta540retc7"}]}}